package com.leateck.parameter.sequencerule0010;

/**
 * This file is generated by ParameterClassManager
 *
 * Please do not modify this file manually !!
 */
import com.datasweep.compatibility.client.ATRow;
import com.datasweep.compatibility.client.AccessPrivilege;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Response;
import com.datasweep.compatibility.ui.Time;
import com.rockwell.mes.commons.base.ifc.objects.BulkSaveableMESATObject;



/**
 * Generated class definition
* <br/>Application table: CL_ParamSeqRule0100
 */
public abstract class MESGeneratedParamSeqRule0100
 extends BulkSaveableMESATObject {

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "CL_ParamSeqRule0100";


    @Override
    public String getATDefinitionName() {
        return ATDEFINITION_NAME;
    }

    /**
     * Generated constructor
     *
     * @param key The key of the ATRow to load.
     */
    public MESGeneratedParamSeqRule0100(long key) {
        super(key);     
    }

    /**
     * Generated copy constructor
     *
     * @param source the source to copy.
     */
    public MESGeneratedParamSeqRule0100(MESGeneratedParamSeqRule0100 source) {
        super(source);
    }

    /**
     * Generated constructor
     *
     * @param baseATRow The ATRow to wrap.
     */
    public MESGeneratedParamSeqRule0100(ATRow baseATRow) {
        super(baseATRow);    
    }

    /**
     * Generated constructor
     */
    public MESGeneratedParamSeqRule0100() {
        super();
    }

    @Override
    protected void synchronizeAfterATRowRefresh() {
        super.synchronizeAfterATRowRefresh();
    }    
    
    /**
     * Generated method definition
     *
     * @return the requested value
     */
    public String getRule() {
        return (String) this.dgtATRow.getValue("CL_rule");
    }

    /**
     * Generated method definition
     *
     * @param value The new value to be assigned
     */
    public void setRule(String value) {
        String oldValue = this.getRule();
        this.dgtATRow.setValue("CL_rule", value);
        pcs.firePropertyChange("rule", oldValue, value);
    }

    /**
     * Generated method definition
     *
     * @return the requested value
     */
    public String getComment1() {
        return (String) this.dgtATRow.getValue("CL_comment1");
    }

    /**
     * Generated method definition
     *
     * @param value The new value to be assigned
     */
    public void setComment1(String value) {
        String oldValue = this.getComment1();
        this.dgtATRow.setValue("CL_comment1", value);
        pcs.firePropertyChange("comment1", oldValue, value);
    }

    /**
     * Generated method definition
     *
     * @return the requested value
     */
    public String getComment2() {
        return (String) this.dgtATRow.getValue("CL_comment2");
    }

    /**
     * Generated method definition
     *
     * @param value The new value to be assigned
     */
    public void setComment2(String value) {
        String oldValue = this.getComment2();
        this.dgtATRow.setValue("CL_comment2", value);
        pcs.firePropertyChange("comment2", oldValue, value);
    }

    @Override
    public Response prepareATRowForSave(boolean isBulkSave) {
        // Check if cached references are valid:
        Response res = super.prepareATRowForSave(isBulkSave);

        return res;
    }

    /**
     * Overridden to make the method <b>final</b> to ensure that it does nothing else but calling the method from the
     * base class. Note: "nothing else" matters, so do not remove or change anything.
     *
     * {@inheritDoc}
     */
    // CHECKSTYLE:MethodNameCheck:off
    //SuppressFBWarnings(value = "NM_METHOD_NAMING_CONVENTION", justification = "super class")
    @Override
    public final void Save(Time time, String comment, AccessPrivilege accessPrivilege) //
            throws DatasweepException {
        super.Save(time, comment, accessPrivilege);
    }
    // CHECKSTYLE:MethodNameCheck:on
}
