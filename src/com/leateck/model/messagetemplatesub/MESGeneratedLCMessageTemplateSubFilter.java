package com.leateck.model.messagetemplatesub;


/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.MeasuredValue;
import com.datasweep.compatibility.client.Server;
import com.leateck.model.messagetemplate.IMESLCMessageTemplate;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_MessageTemplateSub.
 */
public abstract class MESGeneratedLCMessageTemplateSubFilter extends MESATObjectFilter implements IMESGeneratedLCMessageTemplateSubFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_MessageTemplateSub";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCMessageTemplateSubFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCMessageTemplateSubFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCMessageTemplateSub> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCMessageTemplateSub.class);
    }

      @Override
      public IMESLCMessageTemplateSubFilter forCriticalTimeEqualTo(MeasuredValue value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateSubFilter) forColumnNameEqualTo(IMESLCMessageTemplateSub.COL_NAME_CRITICALTIME, value);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forCriticalTimeNotEqualTo(MeasuredValue value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateSubFilter) forColumnNameNotEqualTo(IMESLCMessageTemplateSub.COL_NAME_CRITICALTIME, value);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forEquipStatusModelContaining(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateSubFilter) forColumnNameContaining(IMESLCMessageTemplateSub.COL_NAME_EQUIPSTATUSMODEL, value);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forEquipStatusModelEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateSubFilter) forColumnNameEqualTo(IMESLCMessageTemplateSub.COL_NAME_EQUIPSTATUSMODEL, value);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forEquipStatusModelNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateSubFilter) forColumnNameNotEqualTo(IMESLCMessageTemplateSub.COL_NAME_EQUIPSTATUSMODEL, value);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forEquipStatusModelStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateSubFilter) forColumnNameStartingWith(IMESLCMessageTemplateSub.COL_NAME_EQUIPSTATUSMODEL, value);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forMessageTemplateEqualTo(IMESLCMessageTemplate value) //
              throws DatasweepException {
          Long key = (value == null) ? null : Long.valueOf(value.getKey());
          return (IMESLCMessageTemplateSubFilter) forColumnNameEqualTo(IMESLCMessageTemplateSub.COL_NAME_MESSAGETEMPLATE, key);
      }

      @Override
      public IMESLCMessageTemplateSubFilter forMessageTemplateNotEqualTo(IMESLCMessageTemplate value) //
              throws DatasweepException {
          Long key = (value == null) ? null : Long.valueOf(value.getKey());
          return (IMESLCMessageTemplateSubFilter) forColumnNameNotEqualTo(IMESLCMessageTemplateSub.COL_NAME_MESSAGETEMPLATE, key);
      }

}