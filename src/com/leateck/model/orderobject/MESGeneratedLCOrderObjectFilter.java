package com.leateck.model.orderobject;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.leateck.model.orderobject.IMESGeneratedLCOrderObjectFilter;
import com.leateck.model.orderobject.IMESLCOrderObject;
import com.leateck.model.orderobject.IMESLCOrderObjectFilter;
import com.leateck.model.orderobject.MESLCOrderObject;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_OrderObject.
 */
public abstract class MESGeneratedLCOrderObjectFilter extends MESATObjectFilter implements IMESGeneratedLCOrderObjectFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_OrderObject";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCOrderObjectFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCOrderObjectFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCOrderObject> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCOrderObject.class);
    }

      @Override
      public IMESLCOrderObjectFilter forBatchnoContaining(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameContaining(IMESLCOrderObject.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forBatchnoEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameEqualTo(IMESLCOrderObject.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forBatchnoNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameNotEqualTo(IMESLCOrderObject.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forBatchnoStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameStartingWith(IMESLCOrderObject.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forOrdernoContaining(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameContaining(IMESLCOrderObject.COL_NAME_ORDERNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forOrdernoEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameEqualTo(IMESLCOrderObject.COL_NAME_ORDERNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forOrdernoNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameNotEqualTo(IMESLCOrderObject.COL_NAME_ORDERNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forOrdernoStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameStartingWith(IMESLCOrderObject.COL_NAME_ORDERNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forPartnoContaining(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameContaining(IMESLCOrderObject.COL_NAME_PARTNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forPartnoEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameEqualTo(IMESLCOrderObject.COL_NAME_PARTNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forPartnoNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameNotEqualTo(IMESLCOrderObject.COL_NAME_PARTNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forPartnoStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameStartingWith(IMESLCOrderObject.COL_NAME_PARTNO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forRecipenoContaining(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameContaining(IMESLCOrderObject.COL_NAME_RECIPENO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forRecipenoEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameEqualTo(IMESLCOrderObject.COL_NAME_RECIPENO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forRecipenoNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameNotEqualTo(IMESLCOrderObject.COL_NAME_RECIPENO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forRecipenoStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameStartingWith(IMESLCOrderObject.COL_NAME_RECIPENO, value);
      }

      @Override
      public IMESLCOrderObjectFilter forTypeContaining(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameContaining(IMESLCOrderObject.COL_NAME_TYPE, value);
      }

      @Override
      public IMESLCOrderObjectFilter forTypeEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameEqualTo(IMESLCOrderObject.COL_NAME_TYPE, value);
      }

      @Override
      public IMESLCOrderObjectFilter forTypeNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameNotEqualTo(IMESLCOrderObject.COL_NAME_TYPE, value);
      }

      @Override
      public IMESLCOrderObjectFilter forTypeStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCOrderObjectFilter) forColumnNameStartingWith(IMESLCOrderObject.COL_NAME_TYPE, value);
      }

}