package com.leateck.model.processPackRecord;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.leateck.model.processPackRecord.IMESGeneratedLCProcessPackRecordFilter;
import com.leateck.model.processPackRecord.IMESLCProcessPackRecord;
import com.leateck.model.processPackRecord.IMESLCProcessPackRecordFilter;
import com.leateck.model.processPackRecord.MESLCProcessPackRecord;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.datasweep.compatibility.ui.Time;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_ProcessPackRecord.
 */
public abstract class MESGeneratedLCProcessPackRecordFilter extends MESATObjectFilter implements IMESGeneratedLCProcessPackRecordFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_ProcessPackRecord";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCProcessPackRecordFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCProcessPackRecordFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCProcessPackRecord> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCProcessPackRecord.class);
    }

      @Override
      public IMESLCProcessPackRecordFilter forCommentsContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameContaining(IMESLCProcessPackRecord.COL_NAME_COMMENTS, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forCommentsEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_COMMENTS, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forCommentsNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_COMMENTS, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forCommentsStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameStartingWith(IMESLCProcessPackRecord.COL_NAME_COMMENTS, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forOperatorContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameContaining(IMESLCProcessPackRecord.COL_NAME_OPERATOR, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forOperatorEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_OPERATOR, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forOperatorNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_OPERATOR, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forOperatorStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameStartingWith(IMESLCProcessPackRecord.COL_NAME_OPERATOR, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackDesContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameContaining(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackDesEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackDesNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackDesStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameStartingWith(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackIdContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameContaining(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackIdEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackIdNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackIdStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameStartingWith(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackStateEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackStateGreaterThanOrEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameGreaterThanOrEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackStateLessThan(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameLessThan(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forProcessPackStateNotEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forStateDateEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_STATEDATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forStateDateGreaterThanOrEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameGreaterThanOrEqualTo(IMESLCProcessPackRecord.COL_NAME_STATEDATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forStateDateLessThan(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameLessThan(IMESLCProcessPackRecord.COL_NAME_STATEDATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forStateDateNotEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_STATEDATE, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forVersionContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameContaining(IMESLCProcessPackRecord.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forVersionEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameEqualTo(IMESLCProcessPackRecord.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forVersionNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameNotEqualTo(IMESLCProcessPackRecord.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCProcessPackRecordFilter forVersionStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackRecordFilter) forColumnNameStartingWith(IMESLCProcessPackRecord.COL_NAME_VERSION, value);
      }

}