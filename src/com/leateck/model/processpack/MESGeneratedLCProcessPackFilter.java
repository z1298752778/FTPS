package com.leateck.model.processpack;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.leateck.model.processpack.IMESGeneratedLCProcessPackFilter;
import com.leateck.model.processpack.IMESLCProcessPack;
import com.leateck.model.processpack.IMESLCProcessPackFilter;
import com.leateck.model.processpack.MESLCProcessPack;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.datasweep.compatibility.ui.Time;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_ProcessPack.
 */
public abstract class MESGeneratedLCProcessPackFilter extends MESATObjectFilter implements IMESGeneratedLCProcessPackFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_ProcessPack";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCProcessPackFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCProcessPackFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCProcessPack> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCProcessPack.class);
    }

      @Override
      public IMESLCProcessPackFilter forCreateTimeEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forCreateTimeGreaterThanOrEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forCreateTimeLessThan(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameLessThan(IMESLCProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forCreateTimeNotEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forEntryTimeEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forEntryTimeGreaterThanOrEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forEntryTimeLessThan(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameLessThan(IMESLCProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forEntryTimeNotEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCProcessPackFilter forIsLockEqualTo(Boolean value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_ISLOCK, value);
      }

      @Override
      public IMESLCProcessPackFilter forIsLockNotEqualTo(Boolean value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_ISLOCK, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackDesContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameContaining(IMESLCProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackDesEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackDesNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackDesStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameStartingWith(IMESLCProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackIdContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameContaining(IMESLCProcessPack.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackIdEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackIdNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackIdStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameStartingWith(IMESLCProcessPack.COL_NAME_PROCESSPACKID, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackStateEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackStateGreaterThanOrEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackStateLessThan(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameLessThan(IMESLCProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackFilter forProcessPackStateNotEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCProcessPackFilter forVersionContaining(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameContaining(IMESLCProcessPack.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCProcessPackFilter forVersionEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameEqualTo(IMESLCProcessPack.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCProcessPackFilter forVersionNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameNotEqualTo(IMESLCProcessPack.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCProcessPackFilter forVersionStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCProcessPackFilter) forColumnNameStartingWith(IMESLCProcessPack.COL_NAME_VERSION, value);
      }

}