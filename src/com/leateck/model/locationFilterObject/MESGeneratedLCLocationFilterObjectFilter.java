package com.leateck.model.locationFilterObject;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_LocationFilterObject.
 */
public abstract class MESGeneratedLCLocationFilterObjectFilter extends MESATObjectFilter implements IMESGeneratedLCLocationFilterObjectFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_LocationFilterObject";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCLocationFilterObjectFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCLocationFilterObjectFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCLocationFilterObject> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCLocationFilterObject.class);
    }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationContaining(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameContaining(IMESLCLocationFilterObject.COL_NAME_LOCATION, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameEqualTo(IMESLCLocationFilterObject.COL_NAME_LOCATION, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameNotEqualTo(IMESLCLocationFilterObject.COL_NAME_LOCATION, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameStartingWith(IMESLCLocationFilterObject.COL_NAME_LOCATION, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationDescContaining(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameContaining(IMESLCLocationFilterObject.COL_NAME_LOCATIONDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationDescEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameEqualTo(IMESLCLocationFilterObject.COL_NAME_LOCATIONDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationDescNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameNotEqualTo(IMESLCLocationFilterObject.COL_NAME_LOCATIONDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forLocationDescStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameStartingWith(IMESLCLocationFilterObject.COL_NAME_LOCATIONDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaContaining(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameContaining(IMESLCLocationFilterObject.COL_NAME_STORAGEAREA, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameEqualTo(IMESLCLocationFilterObject.COL_NAME_STORAGEAREA, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameNotEqualTo(IMESLCLocationFilterObject.COL_NAME_STORAGEAREA, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameStartingWith(IMESLCLocationFilterObject.COL_NAME_STORAGEAREA, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaDescContaining(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameContaining(IMESLCLocationFilterObject.COL_NAME_STORAGEAREADESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaDescEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameEqualTo(IMESLCLocationFilterObject.COL_NAME_STORAGEAREADESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaDescNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameNotEqualTo(IMESLCLocationFilterObject.COL_NAME_STORAGEAREADESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forStorageAreaDescStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameStartingWith(IMESLCLocationFilterObject.COL_NAME_STORAGEAREADESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseContaining(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameContaining(IMESLCLocationFilterObject.COL_NAME_WAREHOUSE, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameEqualTo(IMESLCLocationFilterObject.COL_NAME_WAREHOUSE, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameNotEqualTo(IMESLCLocationFilterObject.COL_NAME_WAREHOUSE, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameStartingWith(IMESLCLocationFilterObject.COL_NAME_WAREHOUSE, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseDescContaining(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameContaining(IMESLCLocationFilterObject.COL_NAME_WAREHOUSEDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseDescEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameEqualTo(IMESLCLocationFilterObject.COL_NAME_WAREHOUSEDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseDescNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameNotEqualTo(IMESLCLocationFilterObject.COL_NAME_WAREHOUSEDESC, value);
      }

      @Override
      public IMESLCLocationFilterObjectFilter forWarehouseDescStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCLocationFilterObjectFilter) forColumnNameStartingWith(IMESLCLocationFilterObject.COL_NAME_WAREHOUSEDESC, value);
      }

}