package com.leateck.model.messagetemplate;


/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.MeasuredValue;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_MessageTemplate.
 */
public abstract class MESGeneratedLCMessageTemplateFilter extends MESATObjectFilter implements IMESGeneratedLCMessageTemplateFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_MessageTemplate";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCMessageTemplateFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCMessageTemplateFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCMessageTemplate> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCMessageTemplate.class);
    }

      @Override
      public IMESLCMessageTemplateFilter forCodeNameContaining(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameContaining(IMESLCMessageTemplate.COL_NAME_CODENAME, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCodeNameEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_CODENAME, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCodeNameNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_CODENAME, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCodeNameStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameStartingWith(IMESLCMessageTemplate.COL_NAME_CODENAME, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCriticalTimeEqualTo(MeasuredValue value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_CRITICALTIME, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCriticalTimeNotEqualTo(MeasuredValue value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_CRITICALTIME, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCustomMessageContaining(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameContaining(IMESLCMessageTemplate.COL_NAME_CUSTOMMESSAGE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCustomMessageEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_CUSTOMMESSAGE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCustomMessageNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_CUSTOMMESSAGE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forCustomMessageStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameStartingWith(IMESLCMessageTemplate.COL_NAME_CUSTOMMESSAGE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forMessageIdContaining(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameContaining(IMESLCMessageTemplate.COL_NAME_MESSAGEID, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forMessageIdEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_MESSAGEID, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forMessageIdNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_MESSAGEID, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forMessageIdStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameStartingWith(IMESLCMessageTemplate.COL_NAME_MESSAGEID, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forStatusEqualTo(Boolean value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_STATUS, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forStatusNotEqualTo(Boolean value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_STATUS, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forTemplateTypeEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_TEMPLATETYPE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forTemplateTypeGreaterThanOrEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameGreaterThanOrEqualTo(IMESLCMessageTemplate.COL_NAME_TEMPLATETYPE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forTemplateTypeLessThan(Long value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameLessThan(IMESLCMessageTemplate.COL_NAME_TEMPLATETYPE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forTemplateTypeNotEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_TEMPLATETYPE, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserContaining(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameContaining(IMESLCMessageTemplate.COL_NAME_USER, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_USER, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_USER, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameStartingWith(IMESLCMessageTemplate.COL_NAME_USER, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserGroupContaining(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameContaining(IMESLCMessageTemplate.COL_NAME_USERGROUP, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserGroupEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameEqualTo(IMESLCMessageTemplate.COL_NAME_USERGROUP, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserGroupNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameNotEqualTo(IMESLCMessageTemplate.COL_NAME_USERGROUP, value);
      }

      @Override
      public IMESLCMessageTemplateFilter forUserGroupStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCMessageTemplateFilter) forColumnNameStartingWith(IMESLCMessageTemplate.COL_NAME_USERGROUP, value);
      }

}