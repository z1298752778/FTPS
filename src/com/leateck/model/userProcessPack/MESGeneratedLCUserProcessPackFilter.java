package com.leateck.model.userProcessPack;

/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */
import com.leateck.model.userProcessPack.IMESGeneratedLCUserProcessPackFilter;
import com.leateck.model.userProcessPack.IMESLCUserProcessPack;
import com.leateck.model.userProcessPack.IMESLCUserProcessPackFilter;
import com.leateck.model.userProcessPack.MESLCUserProcessPack;
import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.datasweep.compatibility.ui.Time;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import java.util.List;

/**
 * Generated filter class for application table LC_UserProcessPack.
 */
public abstract class MESGeneratedLCUserProcessPackFilter extends MESATObjectFilter implements IMESGeneratedLCUserProcessPackFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "LC_UserProcessPack";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedLCUserProcessPackFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedLCUserProcessPackFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESLCUserProcessPack> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESLCUserProcessPack.class);
    }

      @Override
      public IMESLCUserProcessPackFilter forCreateTimeEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forCreateTimeGreaterThanOrEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCUserProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forCreateTimeLessThan(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameLessThan(IMESLCUserProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forCreateTimeNotEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_CREATETIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forEntryTimeEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forEntryTimeGreaterThanOrEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCUserProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forEntryTimeLessThan(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameLessThan(IMESLCUserProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forEntryTimeNotEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_ENTRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forExpiryTimeEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_EXPIRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forExpiryTimeGreaterThanOrEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCUserProcessPack.COL_NAME_EXPIRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forExpiryTimeLessThan(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameLessThan(IMESLCUserProcessPack.COL_NAME_EXPIRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forExpiryTimeNotEqualTo(Time value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_EXPIRYTIME, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackDesContaining(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameContaining(IMESLCUserProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackDesEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackDesNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackDesStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameStartingWith(IMESLCUserProcessPack.COL_NAME_PROCESSPACKDES, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackIdeContaining(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameContaining(IMESLCUserProcessPack.COL_NAME_PROCESSPACKIDE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackIdeEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKIDE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackIdeNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKIDE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackIdeStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameStartingWith(IMESLCUserProcessPack.COL_NAME_PROCESSPACKIDE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackStateEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackStateGreaterThanOrEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameGreaterThanOrEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackStateLessThan(Long value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameLessThan(IMESLCUserProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forProcessPackStateNotEqualTo(Long value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_PROCESSPACKSTATE, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forVersionContaining(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameContaining(IMESLCUserProcessPack.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forVersionEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameEqualTo(IMESLCUserProcessPack.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forVersionNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameNotEqualTo(IMESLCUserProcessPack.COL_NAME_VERSION, value);
      }

      @Override
      public IMESLCUserProcessPackFilter forVersionStartingWith(String value) //
              throws DatasweepException {
          return (IMESLCUserProcessPackFilter) forColumnNameStartingWith(IMESLCUserProcessPack.COL_NAME_VERSION, value);
      }

}