package com.leateck.commons.materiaInventoryImport.entity;



/**
 * This file was generated by ATDefAccessClassGenerator and FMPP 2.3.15
 *
 * Please do not modify this file manually !!
 */

import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;

import java.util.List;

/**
 * Generated filter class for application table CD_MateriaInventoryImport.
 */
public abstract class MESGeneratedCDMateriaInventoryImportFilter extends MESATObjectFilter implements IMESGeneratedCDMateriaInventoryImportFilter {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    protected static final String ATDEFINITION_NAME = "CD_MateriaInventoryImport";

    /**
     * Generated constructor
     * 
     * @param server The Server object
     */
    public MESGeneratedCDMateriaInventoryImportFilter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated default constructor
     */
    public MESGeneratedCDMateriaInventoryImportFilter() {
        this(PCContext.getServerImpl());
    }

    @Override
    public List<IMESCDMateriaInventoryImport> getFilteredObjects() {
        return MESATObject.getFilteredMESATObjectList(this, IMESCDMateriaInventoryImport.class);
    }

      @Override
      public IMESCDMateriaInventoryImportFilter forBatchNoContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forBatchNoEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forBatchNoNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forBatchNoStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_BATCHNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forImportNumberContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_IMPORTNUMBER, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forImportNumberEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_IMPORTNUMBER, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forImportNumberNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_IMPORTNUMBER, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forImportNumberStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_IMPORTNUMBER, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forInventoryQtyContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_INVENTORYQTY, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forInventoryQtyEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_INVENTORYQTY, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forInventoryQtyNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_INVENTORYQTY, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forInventoryQtyStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_INVENTORYQTY, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialDescContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_MATERIALDESC, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialDescEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_MATERIALDESC, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialDescNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_MATERIALDESC, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialDescStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_MATERIALDESC, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialNoContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_MATERIALNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialNoEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_MATERIALNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialNoNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_MATERIALNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forMaterialNoStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_MATERIALNO, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forPackagingSpecificationsContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_PACKAGINGSPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forPackagingSpecificationsEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_PACKAGINGSPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forPackagingSpecificationsNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_PACKAGINGSPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forPackagingSpecificationsStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_PACKAGINGSPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSpecificationsContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_SPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSpecificationsEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_SPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSpecificationsNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_SPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSpecificationsStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_SPECIFICATIONS, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSublotNumContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_SUBLOTNUM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSublotNumEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_SUBLOTNUM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSublotNumNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_SUBLOTNUM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forSublotNumStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_SUBLOTNUM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forTipContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_TIP, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forTipEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_TIP, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forTipNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_TIP, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forTipStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_TIP, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUnitContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_UNIT, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUnitEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_UNIT, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUnitNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_UNIT, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUnitStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_UNIT, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUomContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_UOM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUomEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_UOM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUomNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_UOM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forUomStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_UOM, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forValidityDataContaining(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameContaining(IMESCDMateriaInventoryImport.COL_NAME_VALIDITYDATA, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forValidityDataEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameEqualTo(IMESCDMateriaInventoryImport.COL_NAME_VALIDITYDATA, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forValidityDataNotEqualTo(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameNotEqualTo(IMESCDMateriaInventoryImport.COL_NAME_VALIDITYDATA, value);
      }

      @Override
      public IMESCDMateriaInventoryImportFilter forValidityDataStartingWith(String value) //
              throws DatasweepException {
          return (IMESCDMateriaInventoryImportFilter) forColumnNameStartingWith(IMESCDMateriaInventoryImport.COL_NAME_VALIDITYDATA, value);
      }

}