package com.leateck.phase.materialproduction0010;

/**
 * This file is generated by the PhaseLibManager
 */
import com.datasweep.compatibility.client.ATRow;
import com.rockwell.mes.services.s88.ifc.processdata.IMESRtPhaseData;

import java.nio.charset.Charset;

/**
 * Generated class definition
 */
public class MESRtPhaseDataLCMatProduce0010 extends MESGeneratedRtPhaseDataLCMatProduce0010 //
                                                  implements IMESRtPhaseData {

    /**
     * Generated method definition
     *
     * @param key The key of the ATRow to load.
     */
    public MESRtPhaseDataLCMatProduce0010(long key) {
        super(key);
    }

    /**
     * Generated method definition
     *
     * @param source the source to copy.
     */
    public MESRtPhaseDataLCMatProduce0010(MESRtPhaseDataLCMatProduce0010 source) {
        super(source);
    }

    /**
     * Generated method definition
     *
     * @param baseATRow The ATRow to wrap.
     */
    public MESRtPhaseDataLCMatProduce0010(ATRow baseATRow) {
        super(baseATRow);
    }

    /**
     * Generated method definition
     *
     */
    public MESRtPhaseDataLCMatProduce0010() {
        super();
    }

    public String getCommentToExecutionStr() {
        final byte[] commentToExecution = this.getCommentToExecution();
        if (commentToExecution == null) {
            return null;
        }
        return new String(commentToExecution, Charset.defaultCharset());
    }

    public String toString() {
        String string = "none";
        final ATRow atRow = this.getATRow();
        if (atRow != null) {
            string = Long.toString(atRow.getKey());
        }
        final StringBuilder sb = new StringBuilder();
        sb.append(this.getClass().getSimpleName());
        sb.append(": ").append(string);
        sb.append(" isSummary: ").append(this.getIsSummaryData());
        sb.append(" isHeader: ").append(this.getIsHeader());
        sb.append(" plannedQty: ").append(this.getPlannedQty());
        sb.append(" producedQty: ").append(this.getProducedQty());
        sb.append(" materialID: ").append(this.getMaterialID());
        sb.append(" batch: ").append(this.getBatchID());
        sb.append(" sublot: ").append(this.getSublotID());
        sb.append(" sublotQty: ").append(this.getSublotQty());
        sb.append(" result: ").append(this.getResult());
        return sb.toString();
    }

}
