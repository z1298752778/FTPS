package com.leateck.phase.identifyequipment0100;

import java.awt.*;
import java.util.List;

import javax.swing.*;
import javax.swing.event.AncestorEvent;
import javax.swing.event.AncestorListener;

import com.rockwell.mes.apps.ebr.ifc.phase.IPhaseExecutor;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.UIConstants;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.eqpropertylist.EquipmentPropertyListModel;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.eqpropertylist.EquipmentPropertyListView;
import com.rockwell.mes.apps.ebr.ifc.swing.ConfirmButton;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseColumnLayout.Column;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSwingHelper;
import com.rockwell.mes.clientfw.commons.ifc.swing.MESStandardGrid;
import com.rockwell.mes.commons.base.ifc.i18n.I18nMessageUtility;
import com.rockwell.mes.commons.base.ifc.utility.Pair;
import com.rockwell.mes.commons.parameter.equipmentobject.MESParamEqObject0200;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseMainView0200;
import com.rockwell.mes.parameter.phaseidentificationmode.MESParamIdentMode0100;
import com.rockwell.mes.parameter.phaseidentificationmode.PhaseIdentificationMode0100;
import com.rockwell.mes.phase.eqidentification.RtPhaseModelEqIdent0210;
import com.rockwell.mes.phase.eqidentification.RtPhaseTableRowModelEqIdent0210;
import com.rockwell.mes.phase.eqidentification.RtPhaseViewEqIdent0210;
import com.rockwell.mes.services.s88.ifc.recipe.IMESProcessParameterInstance;
import com.rockwell.mes.services.s88equipment.ifc.IMESS88Equipment;
import com.rockwell.mes.shared.childgrid.EqChildGridHelper0100;
import com.rockwell.mes.shared.childgrid.EqChildGridPanel0100;
import com.rockwell.mes.shared.childgrid.RtPhaseTableRowModelChildGrid0100;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * TODO: Runtime phase view.
 * <p>
 * Skeleton generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseViewIdentEq0100 extends AbstractPhaseMainView0200<RtPhaseModelIdentEq0100> {
    private static final long serialVersionUID = 1L;
    private static final Log LOGGER = LogFactory.getLog(RtPhaseViewEqIdent0210.class);
    private MESStandardGrid equipmentGrid;
    private EqChildGridPanel0100 childEntitiesPanel = null;
    private final EquipmentPropertyListView propertyListView;

    protected RtPhaseViewIdentEq0100(RtPhaseModelIdentEq0100 baseModel) {
        super(baseModel);
        this.propertyListView = new EquipmentPropertyListView(new EquipmentPropertyListModel(baseModel), "PhaseEqmEqIdentification0210");
    }

    public void createUI() {
        this.setLayout(new BoxLayout(this, 1));
        this.setOpaque(false);
        String var1 = ((RtPhaseModelIdentEq0100)this.getModel()).getParameterInstruction().getText();
        this.add(this.createInstructionPanel(var1, 994));
        MESParamEqObject0200 var2 = ((RtPhaseModelIdentEq0100)this.getModel()).getParameterGroupingParent();
        boolean var3 = var2 != null && var2.getEquipmentObject() != null;
        IMESProcessParameterInstance var4 = ((RtPhaseModelIdentEq0100)this.getModel()).getParameterGroupingParentWithoutData();
        boolean var5 = var4 != null && var4.hasInputExpression("equipmentObject");
        if (var2 != null && (var3 || var5)) {
            this.add(this.createGroupingParentPanel(var2.getEquipmentObject(), 994));
        }

        this.add(this.createEqPanel());
        this.propertyListView.createUI();
        this.add(this.propertyListView);
        if (((RtPhaseModelIdentEq0100)this.getModel()).getParamShowChildren()) {
            this.childEntitiesPanel = new EqChildGridPanel0100(((RtPhaseModelIdentEq0100)this.getModel()).getStatus(), (List)null);
            this.add(this.childEntitiesPanel);
        }

        this.refreshActiveGrid();
        this.add(this.createConfirmPanel());
    }

    protected Component createGroupingParentPanel(IMESS88Equipment parentEquipment, int preferredWidth) {
        String var3 = parentEquipment != null ? parentEquipment.getIdentifier() : "";
        String var4;
        if (parentEquipment != null) {
            var4 = parentEquipment.getShortDescription() != null ? parentEquipment.getShortDescription() : "";
        } else {
            var4 = "";
        }

        String var5;
        if (StringUtils.isNotEmpty(var4)) {
            var5 = I18nMessageUtility.getLocalizedMessage("DataDictionary_Default_RtPhaseTableRowModelEqIdent0210", "groupParentIdentifierWithShortDescription_Content", new String[]{var3, var4});
        } else {
            var5 = I18nMessageUtility.getLocalizedMessage("DataDictionary_Default_RtPhaseTableRowModelEqIdent0210", "groupParentIdentifierNoShortDescription_Content", new String[]{var3});
        }

        JPanel var6 = PhaseSwingHelper.createPanel();
        ((FlowLayout)var6.getLayout()).setHgap(9);
        ((FlowLayout)var6.getLayout()).setVgap(9);
        int var7 = preferredWidth - 18;
        JLabel var8 = PhaseSwingHelper.createMultiLineLabel(var5, var7, "");
        var8.setName("eqGroupingParentFieldLabel");
        var6.add(var8, Column.FIRST_COLUMN);
        var6.setName("eqGroupingParentPanel");
        return var6;
    }

    protected JPanel createEqPanel() {
        JPanel var1 = PhaseSwingHelper.createPanel();
        var1.setLayout(new BorderLayout());
        var1.add(this.createEqIdentGrid(), "Center");
        var1.setName("eqIdentPanel");
        return var1;
    }

    protected JPanel createConfirmPanel() {
        JPanel var1 = PhaseSwingHelper.createPanel();
        var1.setLayout(new FlowLayout(2, 9, 9));
        ConfirmButton var2 = this.createConfirmButton();
        this.setConfirmButton(var2);
        this.configureConfirmButton();
        var1.add(var2);
        return var1;
    }

    protected String getNavigatorInfoColumn() {
        IMESS88Equipment var2 = ((RtPhaseModelIdentEq0100)this.getModel()).getIdentifiedEquipment();
        String var1;
        if (!RtPhaseModelIdentEq0100.PhaseResult.SKIPPED.equals(((RtPhaseModelIdentEq0100)this.getModel()).getPhaseResult()) && var2 != null) {
            String var3 = var2.getIdentifier();
            IMESS88Equipment var4 = ((RtPhaseModelIdentEq0100)this.getModel()).getScannedEquipment();
            String var5 = var4 != null ? var4.getIdentifier() : null;
            MESParamIdentMode0100 var6 = ((RtPhaseModelIdentEq0100)this.getModel()).getParameterIdentificationMode();
            PhaseIdentificationMode0100 var7 = var6.getPhaseIdentificationMode();
            var1 = !PhaseIdentificationMode0100.GROUP_OF_ENTITIES.equals(var7) && (!PhaseIdentificationMode0100.ENTITY_OR_GROUP.equals(var7) || !var2.isMemberOfGroup()) ? I18nMessageUtility.getLocalizedMessage("PhaseEqmEqIdentification0210", "navigatorDisplayWithoutScanned_Label", new String[]{var3}) : I18nMessageUtility.getLocalizedMessage("PhaseEqmEqIdentification0210", "navigatorDisplayWithScanned_Label", new String[]{var3, var5});
        } else {
            var1 = "";
        }

        return var1;
    }

    public MESStandardGrid createEqIdentGrid() {
        Object var1 = null;
        this.equipmentGrid = PhaseSwingHelper.createFilledPhaseStandardGrid(((RtPhaseModelIdentEq0100)this.getModel()).getStatus(), RtPhaseTableRowModelEqIdent0210.class, (List)var1);
        this.equipmentGrid.setMultiLineCells("0,1,2,3");
        this.equipmentGrid.addAncestorListener(new RtPhaseViewIdentEq0100.EquipmentGridListener());
        this.equipmentGrid.setName("equipmentGrid");
        return this.equipmentGrid;
    }

    public void refreshActiveGrid() {
        System.out.println("HCY_________________________11111111");
        Pair var1 = ((RtPhaseModelIdentEq0100)this.getModel()).createEquipmentTableListAndChildTableList();
        List var2 = (List)var1.getFirst();
        this.equipmentGrid.setObjects(var2);
        this.equipmentGrid.setAllRowObjectsDeSelected();
        this.propertyListView.refreshActiveGrid();
        if (this.childEntitiesPanel != null && ((RtPhaseModelIdentEq0100)this.getModel()).getParamShowChildren()) {
            List var3 = (List)var1.getSecond();
            IMESS88Equipment var4 = ((RtPhaseModelIdentEq0100)this.getModel()).getIdentifiedEquipment();
            this.updateChildGridValues(var4, var3);
            this.refreshChildEntitiesPanelVisibility();
        }

    }

    private void updateChildGridValues(final IMESS88Equipment equipmentIdentified, final List<RtPhaseTableRowModelChildGrid0100> gridDataForChildGrid) {
        EqChildGridHelper0100.setChildGridData(this.childEntitiesPanel, gridDataForChildGrid, equipmentIdentified);
    }

    private void refreshChildEntitiesPanelVisibility() {
        if (this.childEntitiesPanel != null) {
            List var1 = ((RtPhaseModelIdentEq0100)this.getModel()).getEquipmentChildrenTableList();
            boolean var2 = var1 != null && !var1.isEmpty() || ((RtPhaseModelIdentEq0100)this.getModel()).getStatus() == IPhaseExecutor.Status.PREVIEW;
            this.childEntitiesPanel.setVisible(var2);
        }

    }

    public void busyPainter(final boolean busy) {
        super.busyPainter(busy);
        if (busy) {
            LOGGER.debug("<focus> busyPainter() { equipmentGrid.requestFocus() }");
            this.equipmentGrid.requestFocus();
        }

    }

    public EquipmentPropertyListView getEquipmentPropertyListView() {
        return this.propertyListView;
    }

    private class EquipmentGridListener implements AncestorListener {
        private EquipmentGridListener() {
        }

        public void ancestorAdded(final AncestorEvent event) {
            RtPhaseViewIdentEq0100.this.refreshActiveGrid();
        }

        public void ancestorRemoved(final AncestorEvent event) {
        }

        public void ancestorMoved(final AncestorEvent event) {
        }
    }
}
