package com.leateck.phase.identifyequipment0100;

import com.datasweep.compatibility.ui.Time;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.eqpropertylist.EquipmentPropertyListModel;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.eqpropertylist.EquipmentPropertyListPlugin;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.eqpropertylist.IEquipmentPropertyListModelDelegate;
import com.rockwell.mes.commons.base.ifc.choicelist.IMESChoiceElement;
import com.rockwell.mes.commons.base.ifc.exceptions.MESRuntimeException;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import com.rockwell.mes.commons.base.ifc.services.ServiceFactory;
import com.rockwell.mes.commons.base.ifc.services.TransactionInterceptor;
import com.rockwell.mes.commons.base.ifc.utility.Pair;
import com.rockwell.mes.commons.parameter.bool.MESParamBoolean0100;
import com.rockwell.mes.commons.parameter.booltrue.MESParamBooleanTrue0100;
import com.rockwell.mes.commons.parameter.equipmentobject.MESParamEqObject0200;
import com.rockwell.mes.commons.parameter.exceptiondef.MESParamExceptionDef0300;
import com.rockwell.mes.commons.parameter.plaininstruction.MESParamPlainInstr0100;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseModel0200;
import com.rockwell.mes.parameter.equipmentpropertylist.MESParamEqPropertyList0100;
import com.rockwell.mes.parameter.phaseidentificationmode.MESParamIdentMode0100;
import com.rockwell.mes.services.s88.ifc.execution.equipment.query.IEquipmentPropertyListItemDescriptor;
import com.rockwell.mes.services.s88.ifc.recipe.IMESEquipmentReqParameter;
import com.rockwell.mes.services.s88.ifc.recipe.IMESProcessParameterInstance;
import com.rockwell.mes.services.s88.ifc.recipe.IS88ProcessParameterBundle;
import com.rockwell.mes.services.s88.ifc.recipe.equipment.IMESEquipmentPropertyReq;
import com.rockwell.mes.services.s88.ifc.recipe.equipment.IMESFSMEquipmentPropertyReq;
import com.rockwell.mes.services.s88equipment.ifc.*;
import com.rockwell.mes.shared.childgrid.EqChildGridHelper0100;
import com.rockwell.mes.shared.childgrid.IEquipmentChildFilter0100;
import com.rockwell.mes.shared.childgrid.RtPhaseTableRowModelChildGrid0100;
import com.rockwell.mes.shared.childgrid.StatusColumnValueS88GraphState0100;
import org.apache.commons.lang3.SerializationUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

import java.io.Serializable;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Iterator;
import java.util.List;

/**
 * TODO: Runtime phase model.
 * <p>
 * Skeleton generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseModelIdentEq0100 extends AbstractPhaseModel0200<MESRtPhaseDataIdentEq0100, MESRtPhaseOutputIdentEq0100> implements IEquipmentPropertyListModelDelegate {
    private static final Log LOGGER = LogFactory.getLog(RtPhaseModelIdentEq0100.class);
    public static final String PARAMETER_INSTRUCTION = "Instruction";
    public static final String PARAMETER_IDENTIFY_MANUALLY = "Enter identifier manually";
    public static final String PARAMETER_SHOW_CHILDREN = "Show children";
    public static final String PARAMETER_UNDO_IDENTIFICATION = "Undo identification";
    public static final String PARAMETER_SKIP_IDENTIFICATION = "Skip identification";
    public static final String PARAMETER_EQUIPMENT_STATUS_CHECK = "Equipment status check";
    public static final String PARAMETER_PROPERTY_VALUE_CHECK = "Property value check";
    public static final String PARAMETER_GROUPING_PARENT = "Parent entity of group";
    public static final String PARAMETER_IDENTIFICATION_MODE = "Identification mode";
    public static final String PARAMETER_IDENTIFY_IN_CURRENT_BINDING_CONTEXT = "Identify in current binding context";
    public static final String PARAMETER_COMPLETION_MODE = "Mode";
    public static final String PARAMETER_BUNDLE_EQUIPMENT_PROPERTY_LIST = "Equipment property list";
    public static final String CHECK_KEY_IDENTIFY_MANUALLY = "IDENTIFY_MANUALLY";
    public static final String CHECK_KEY_UNDO_IDENTIFICATION = "UNDO_IDENTIFICATION";
    public static final String CHECK_KEY_SKIP_SEPARATION_EXCEPTION = "IDENTIFICATION_SKIPPED";
    public static final String CHECK_KEY_VALIDATION_CHECK = "VALIDATION_CHECK";
    private String equipmentExceptionIdentifier = null;
    private List<RtPhaseTableRowModelIdentEq0100> equipmentList = null;
    private List<RtPhaseTableRowModelChildGrid0100> equipmentChildList = null;
    private IMESS88Equipment equipmentIdentified;
    private IMESS88Equipment equipmentScanned;
    private RtPhaseModelIdentEq0100.PhaseResult phaseResult;

    protected RtPhaseModelIdentEq0100(final RtPhaseExecutorIdentEq0100 inPhaseExecutor) {
        super(inPhaseExecutor);
    }

    void createPhaseData() {
        IMESS88Equipment var1 = this.getIdentifiedEquipment();
        if (LOGGER.isDebugEnabled()) {
            LOGGER.debug("createPhaseData: " + var1);
        }

        MESRtPhaseDataIdentEq0100 var2 = (MESRtPhaseDataIdentEq0100)this.getRtPhaseData();
        MESRtPhaseOutputIdentEq0100 var3 = (MESRtPhaseOutputIdentEq0100)this.getRtPhaseOutput();
        String var4 = var1 != null ? var1.getIdentifier() : null;
        String var5 = var1 != null ? var1.getShortDescription() : null;
        this.fillPhaseData(var2, var1, var4, var5);
        this.fillPhaseOutput(var3, var1, var4, var5);

        try {
            TransactionInterceptor.callInTransactionImpl(() -> {
                var2.Save((Time)null, (String)null, PCContext.getDefaultAccessPrivilege());
                var3.Save((Time)null, (String)null, PCContext.getDefaultAccessPrivilege());
                return null;
            });
        } catch (Exception var7) {
            throw new MESRuntimeException(var7);
        }
    }

    private void fillPhaseData(final MESRtPhaseDataIdentEq0100 data, final IMESS88Equipment identifiedEquipment, final String identifiedEquipmentIdentifier, final String identifiedEquipmentShortDesc) {
        String var5 = this.getGroupingParentFromParameter() != null ? this.getGroupingParentFromParameter().getIdentifier() : null;
        String var6 = this.getGroupingParentFromParameter() != null ? this.getGroupingParentFromParameter().getShortDescription() : null;
        IMESS88Equipment var7 = this.getScannedEquipment();
        String var8 = var7 != null ? var7.getIdentifier() : null;
        String var9 = var7 != null ? var7.getShortDescription() : null;
        IMESEquipmentReqParameter var10 = this.getEquipmentRequirementParameter();
        if (var10 != null) {
            data.setEqReqClassId(var10.getIdentifier());
            data.setEqReqClassShortDesc(var10.getShortDescription());
            data.setEqReqType(var10.getEquipmentRequirementType());
        }

        data.setEqId(identifiedEquipmentIdentifier);
        data.setEqShortDesc(identifiedEquipmentShortDesc);
        data.setScannedEqId(var8);
        data.setScannedEqShortDesc(var9);
        if (identifiedEquipment != null && this.equipmentChildList != null) {
            byte[] var11 = EqChildGridHelper0100.serializeChildGridValues(this.equipmentChildList);
            data.setChildGridData(var11);
        } else {
            data.setChildGridData((byte[])null);
        }

        data.setGroupParentId(var5);
        data.setGroupParentShortDesc(var6);
        data.setEqReqPropVals(SerializationUtils.serialize((Serializable)this.getRequiredPropertyValues()));
        data.setEqReqPropValsStates(SerializationUtils.serialize((Serializable)this.getRequiredPropertyStateValues()));
        data.setEqIdentPropVals(SerializationUtils.serialize((Serializable)this.getIdentifiedEquipmentPropertyValues(this.equipmentIdentified)));
        data.setEqIdentPropValsStates(SerializationUtils.serialize((Serializable)this.getIdentifiedEquipmentPropertyStateValues(this.equipmentIdentified)));
        data.setEqObject(identifiedEquipment);
        this.fillPropertyListPhaseData(data);
    }

    private void fillPropertyListPhaseData(MESRtPhaseDataIdentEq0100 data) {
        EquipmentPropertyListModel var2 = this.getPropertyListModel();
        var2.fillPhaseData(data);
    }

    private void fillPhaseOutput(final MESRtPhaseOutputIdentEq0100 output, final IMESS88Equipment identifiedEquipment, final String identifiedEquipmentIdentifier, final String identifiedEquipmentShortDesc) {
        output.setEqObject(identifiedEquipment);
        output.setEqId(identifiedEquipmentIdentifier);
        output.setEqShortDescription(identifiedEquipmentShortDesc);
        output.setResult(this.phaseResult != null ? this.phaseResult.name() : null);
    }

    public List<IS88ProcessParameterBundle> getDynamicProcessParameterBundlesList() {
        return this.executor.getDynamicProcessParameterBundlesList();
    }

    public MESParamEqPropertyList0100 getParamEquipmentPropertyList(String usageInternalIdentifier) {
        return (MESParamEqPropertyList0100)this.executor.getProcessParameterData(MESParamEqPropertyList0100.class, usageInternalIdentifier);
    }

    public IMESEquipmentReqParameter getEquipmentRequirementParameter() {
        IMESEquipmentReqParameter var1 = null;
        List var2 = this.executor.getPhase().getEquipmentReqParameters();
        if (!var2.isEmpty()) {
            var1 = (IMESEquipmentReqParameter)var2.get(0);
        }

        return var1;
    }

    public Boolean getParamShowChildren() {
        return ((MESParamBooleanTrue0100)this.executor.getProcessParameterData(MESParamBooleanTrue0100.class, "Show children")).getEnabled();
    }

    public MESParamExceptionDef0300 getParameterIdentifyManually() {
        return (MESParamExceptionDef0300)this.executor.getProcessParameterData(MESParamExceptionDef0300.class, "Enter identifier manually");
    }

    public MESParamEqObject0200 getParameterGroupingParent() {
        return (MESParamEqObject0200)this.executor.getProcessParameterData(MESParamEqObject0200.class, "Parent entity of group");
    }

    public IMESProcessParameterInstance getParameterGroupingParentWithoutData() {
        return this.executor.getParameter("Parent entity of group");
    }

    public IMESS88Equipment getGroupingParentFromParameter() {
        MESParamEqObject0200 var1 = this.getParameterGroupingParent();
        return var1 == null ? null : var1.getEquipmentObject();
    }

    public MESParamBoolean0100 getParameterIdentifyInCurrentBindingContext() {
        return (MESParamBoolean0100)this.executor.getProcessParameterData(MESParamBoolean0100.class, "Identify in current binding context");
    }

    public MESParamIdentMode0100 getParameterIdentificationMode() {
        return (MESParamIdentMode0100)this.executor.getProcessParameterData(MESParamIdentMode0100.class, "Identification mode");
    }

    public MESParamExceptionDef0300 getParameterUndoIdentification() {
        return (MESParamExceptionDef0300)this.executor.getProcessParameterData(MESParamExceptionDef0300.class, "Undo identification");
    }

    public MESParamExceptionDef0300 getParameterPropertyValueCheck() {
        return (MESParamExceptionDef0300)this.executor.getProcessParameterData(MESParamExceptionDef0300.class, "Property value check");
    }

    public MESParamPlainInstr0100 getParameterInstruction() {
        return (MESParamPlainInstr0100)this.executor.getProcessParameterData(MESParamPlainInstr0100.class, "Instruction");
    }

    public Pair<List<RtPhaseTableRowModelIdentEq0100>, List<RtPhaseTableRowModelChildGrid0100>> createEquipmentTableListAndChildTableList() {
        this.equipmentList = new ArrayList();
        if (this.getEquipmentRequirementParameter() != null) {
            RtPhaseTableRowModelIdentEq0100 var1 = new RtPhaseTableRowModelIdentEq0100(this.getEquipmentRequirementParameter().getS88EquipmentClass(), this.getAllRequiredPropertyValues());
            this.equipmentList.add(var1);
        }

        if (this.hasRtPhaseData() && StringUtils.isNotEmpty(((MESRtPhaseDataIdentEq0100)this.getRtPhase().getRtPhaseData()).getEqId())) {
            String var6 = ((MESRtPhaseDataIdentEq0100)this.getRtPhase().getRtPhaseData()).getEqId();
            List var2 = (List)SerializationUtils.deserialize(((MESRtPhaseDataIdentEq0100)this.getRtPhase().getRtPhaseData()).getEqIdentPropValsStates());
            RtPhaseTableRowModelIdentEq0100 var3 = new RtPhaseTableRowModelIdentEq0100(this.equipmentIdentified, var2);
            this.equipmentList.add(var3);
            this.equipmentIdentified = ((IS88EquipmentService) ServiceFactory.getService(IS88EquipmentService.class)).loadEquipmentByIdentifier(var6);
            String var4 = ((MESRtPhaseDataIdentEq0100)this.getRtPhase().getRtPhaseData()).getScannedEqId();
            this.equipmentScanned = ((IS88EquipmentService)ServiceFactory.getService(IS88EquipmentService.class)).loadEquipmentByIdentifier(var4);
            byte[] var5 = ((MESRtPhaseDataIdentEq0100)this.getRtPhase().getRtPhaseData()).getChildGridData();
            if (var5 != null) {
                this.equipmentChildList = EqChildGridHelper0100.deserializeChildGridValues(var5);
            }
        }

        return new Pair(this.equipmentList, this.equipmentChildList);
    }

    public List<RtPhaseTableRowModelIdentEq0100> getEquipmentTableList() {
        return this.equipmentList;
    }

    public List<RtPhaseTableRowModelChildGrid0100> getEquipmentChildrenTableList() {
        return this.equipmentChildList;
    }

    public IMESS88Equipment getIdentifiedEquipment() {
        return this.equipmentIdentified;
    }

    public IMESS88Equipment getScannedEquipment() {
        return this.equipmentScanned;
    }

    public void setScannedEquipment(IMESS88Equipment equipment) {
        this.equipmentScanned = equipment;
    }

    protected void setIdentifiedEquipment(IMESS88Equipment equipment) {
        this.equipmentIdentified = equipment;
        if (this.equipmentIdentified != null) {
            this.setPhaseResult(RtPhaseModelIdentEq0100.PhaseResult.IDENTIFIED);
            RtPhaseTableRowModelIdentEq0100 var2 = new RtPhaseTableRowModelIdentEq0100(this.equipmentIdentified, this.getIdentifiedEquipmentPropertyStateValues(this.equipmentIdentified));
            this.getEquipmentTableList().add(var2);
            this.equipmentChildList = EqChildGridHelper0100.getEquipmentChildList(this.equipmentIdentified, (IEquipmentChildFilter0100)null, new StatusColumnValueS88GraphState0100());
        } else {
            this.setPhaseResult((RtPhaseModelIdentEq0100.PhaseResult)null);
            Iterator var4 = this.getEquipmentTableList().iterator();

            while(var4.hasNext()) {
                RtPhaseTableRowModelIdentEq0100 var3 = (RtPhaseTableRowModelIdentEq0100)var4.next();
                if (var3.getEquipmentIdentifier() != null) {
                    this.getEquipmentTableList().remove(var3);
                    if (this.equipmentChildList != null) {
                        this.equipmentChildList.clear();
                    }
                    break;
                }
            }
        }

        this.getPropertyListModel().createPropertyList(this.equipmentIdentified);
        this.createPhaseData();
        ((RtPhaseViewIdentEq0100)this.executor.getView()).refreshActiveGrid();
    }

    public RtPhaseModelIdentEq0100.PhaseResult getPhaseResult() {
        return this.phaseResult;
    }

    public void setPhaseResult(RtPhaseModelIdentEq0100.PhaseResult result) {
        this.phaseResult = result;
    }

    public List<String[]> getAllRequiredPropertyValues() {
        ArrayList var1 = new ArrayList();
        var1.addAll(this.getRequiredPropertyValues());
        if (!this.getRequiredPropertyValues().isEmpty() && !this.getRequiredPropertyStateValues().isEmpty()) {
            var1.add(new String[]{"", "", ""});
        }

        var1.addAll(this.getRequiredPropertyStateValues());
        return var1;
    }

    public List<String[]> getRequiredPropertyValues() {
        ArrayList var1 = new ArrayList();
        if (this.getEquipmentRequirementParameter() != null) {
            Iterator var2 = this.getEquipmentRequirementParameter().getPropertyRequirements().iterator();

            while(var2.hasNext()) {
                IMESEquipmentPropertyReq var3 = (IMESEquipmentPropertyReq)var2.next();
                if (var3 != null && !(var3 instanceof IMESFSMEquipmentPropertyReq)) {
                    String var4 = var3.getIdentifier();
                    String var5 = var3.getEquipmentPropertyType() != null ? var3.getEquipmentPropertyType().getUsage().getMeaning() : "";
                    String var6 = var3.getUIRepresentation();
                    String[] var7 = new String[]{var4, var6, var5};
                    var1.add(var7);
                }
            }
        }

        return var1;
    }

    public List<String[]> getRequiredPropertyStateValues() {
        ArrayList var1 = new ArrayList();
        if (this.getEquipmentRequirementParameter() != null) {
            Iterator var2 = this.getEquipmentRequirementParameter().getPropertyRequirements().iterator();

            while(var2.hasNext()) {
                IMESEquipmentPropertyReq var3 = (IMESEquipmentPropertyReq)var2.next();
                if (var3 != null && var3 instanceof IMESFSMEquipmentPropertyReq) {
                    IMESFSMEquipmentPropertyReq var4 = (IMESFSMEquipmentPropertyReq)var3;
                    String var5 = var4.getIdentifier();
                    String var6 = StringUtils.isNotEmpty(var4.getDescription()) ? var4.getDescription() : var4.getDisplayString();
                    String var7 = var3.getEquipmentPropertyType() != null ? var3.getEquipmentPropertyType().getUsage().getMeaning() : "";
                    String[] var8 = new String[]{var5, var6, var7};
                    var1.add(var8);
                }
            }
        }

        return var1;
    }

    public List<String[]> getAllIdentifiedEquipmentPropertyValues(IMESS88Equipment equipment) {
        ArrayList var2 = new ArrayList();
        var2.addAll(this.getIdentifiedEquipmentPropertyValues(equipment));
        if (!this.getIdentifiedEquipmentPropertyValues(equipment).isEmpty() && !this.getIdentifiedEquipmentPropertyStateValues(equipment).isEmpty()) {
            var2.add(new String[]{"", "", ""});
        }

        var2.addAll(this.getIdentifiedEquipmentPropertyStateValues(equipment));
        return var2;
    }

    public List<String[]> getIdentifiedEquipmentPropertyValues(IMESS88Equipment equipment) {
        ArrayList var2 = new ArrayList();
        if (equipment != null) {
            Iterator var3 = equipment.getProperties().iterator();

            while(var3.hasNext()) {
                IMESEquipmentProperty var4 = (IMESEquipmentProperty)var3.next();
                if (var4 != null && !(var4 instanceof IMESFSMEquipmentProperty)) {
                    String var5 = var4.getIdentifier();
                    String var6 = var4.getDisplayString();
                    String var7 = var4.getEquipmentPropertyType() != null ? var4.getEquipmentPropertyType().getUsage().getMeaning() : "";
                    String[] var8 = new String[]{var5, var6, var7};
                    if (this.getRequiredPropertyNames().contains(var5)) {
                        var2.add(var8);
                    }
                }
            }
        }

        return var2;
    }

    public List<String[]> getIdentifiedEquipmentPropertyStateValues(IMESS88Equipment equipment) {
        if (equipment == null) {
            return Collections.emptyList();
        } else {
            ArrayList var2 = new ArrayList();
            var2.addAll(this.getFSMPropertyStateValues(equipment));
            var2.addAll(EqChildGridHelper0100.getS88GraphStateValues(equipment, (IMESChoiceElement)null));
            return var2;
        }
    }

    private List<String[]> getFSMPropertyStateValues(IMESS88Equipment equipment) {
        ArrayList var2 = new ArrayList();
        Iterator var3 = equipment.getProperties().iterator();

        while(var3.hasNext()) {
            IMESEquipmentProperty var4 = (IMESEquipmentProperty)var3.next();
            if (var4 instanceof IMESFSMEquipmentProperty) {
                String[] var5 = this.getFSMPropertyStateValue((IMESFSMEquipmentProperty)var4);
                var2.add(var5);
            }
        }

        return var2;
    }

    private String[] getFSMPropertyStateValue(IMESFSMEquipmentProperty fsmEquipmentProperty) {
        String var2 = fsmEquipmentProperty.getIdentifier();
        String var3 = fsmEquipmentProperty.getCurrentState().toString();
        String var4 = this.getPropertyUsage(fsmEquipmentProperty);
        return new String[]{var2, var3, var4};
    }

    private String getPropertyUsage(IEquipmentPropertyCommons fsmEquipmentProperty) {
        return fsmEquipmentProperty.getEquipmentPropertyType() == null ? "" : fsmEquipmentProperty.getEquipmentPropertyType().getUsage().getMeaning();
    }

    private List<String> getRequiredPropertyNames() {
        ArrayList var1 = new ArrayList();
        if (this.getEquipmentRequirementParameter() != null) {
            Iterator var2 = this.getEquipmentRequirementParameter().getPropertyRequirements().iterator();

            while(var2.hasNext()) {
                IMESEquipmentPropertyReq var3 = (IMESEquipmentPropertyReq)var2.next();
                if (var3 != null && !(var3 instanceof IMESFSMEquipmentPropertyReq)) {
                    String var4 = var3.getIdentifier();
                    var1.add(var4);
                }
            }
        }

        return var1;
    }

    public String getEquipmentExceptionIdentifier() {
        return this.equipmentExceptionIdentifier;
    }

    public void setEquipmentExceptionIdentifier(String equipmentIdentifierException) {
        this.equipmentExceptionIdentifier = equipmentIdentifierException;
    }

    public boolean isExceptionSigned(String checkKey) {
        return this.executor.isExceptionSigned(checkKey);
    }

    public IEquipmentPropertyListItemDescriptor getEquipmentPropertyListItem(IS88ProcessParameterBundle bundle) {
        return this.getParamEquipmentPropertyList(bundle.getInternalIdentifierOfProcessParameter("Equipment property list"));
    }

    private EquipmentPropertyListModel getPropertyListModel() {
        EquipmentPropertyListPlugin var1 = ((RtPhaseExecutorIdentEq0100)this.executor).getPropertyListPluginExecutor();
        return var1.getModel();
    }

    static enum PhaseResult {
        IDENTIFIED,
        SKIPPED;

        private PhaseResult() {
        }
    }
}
