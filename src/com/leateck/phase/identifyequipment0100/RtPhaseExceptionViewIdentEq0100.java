package com.leateck.phase.identifyequipment0100;

import com.rockwell.mes.apps.ebr.ifc.phase.AbstractPhaseExecutor;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.PhaseExceptionPanelUI;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.PhaseSystemTriggeredExceptionHandler;
import com.rockwell.mes.apps.ebr.ifc.swing.ConfirmButton;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseColumnLayout;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSeparator;
import com.rockwell.mes.apps.ebr.ifc.swing.PhaseSwingHelper;
import com.rockwell.mes.commons.base.ifc.exceptions.MESRuntimeException;
import com.rockwell.mes.commons.base.ifc.i18n.I18nMessageUtility;
import com.rockwell.mes.commons.deviation.ifc.exceptionrecording.IMESExceptionRecord;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseExceptionView0200;
import com.rockwell.mes.commons.shared.phase.mvc.PhaseViewHelper0200;
import com.rockwell.mes.services.s88equipment.ifc.IMESS88Equipment;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * TODO: Runtime phase exception view.
 * <p>
 * Skeleton generated by the PhaseLibManager.
 * <p>
 * 
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseExceptionViewIdentEq0100 extends AbstractPhaseExceptionView0200<RtPhaseModelIdentEq0100> {
    private static final long serialVersionUID = 1L;
    public static final Dimension PREFERRED_SIZE;
    private static final String MANUAL_IDENT = "manualIdent";
    private static final String UNDO_IDENT = "undoident";
    private static final String SKIP_SEPARATION = "skipSeparation";
    private static final String PANEL_MANUAL_IDENT = "manualIdentPanel";
    private static final String PANEL_UNDO_IDENT = "undoidentPanel";
    private static final String PANEL_SKIP_SEPARATION = "skipSeparationPanel";
    private static final String LABEL_MANUAL_IDENT = "manualIdentLabel";
    private static final String LABEL_UNDO_IDENT = "undoidentLabel";
    private static final String LABEL_SKIP_SEPARATION = "skipSeparationLabel";
    private static final String EDIT_MANUAL_IDENT = "manualIdentEdit";

    public RtPhaseExceptionViewIdentEq0100(final RtPhaseModelIdentEq0100 theModel) {
        super(theModel);
    }

    protected void createUI() {
        this.setLayout(new BoxLayout(this, 1));
        JPanel[] var1 = new JPanel[]{this.createManualIdentPanel(), this.createUndoidentPanel(), this.createSkipIdentPanel()};
        boolean var2 = ((RtPhaseModelIdentEq0100)this.getModel()).isExceptionSigned("IDENTIFICATION_SKIPPED");
        JPanel[] var3 = var1;
        int var4 = var1.length;

        for(int var5 = 0; var5 < var4; ++var5) {
            JPanel var6 = var3[var5];
            if (var6 != null) {
                IMESS88Equipment var7 = ((MESRtPhaseDataIdentEq0100)((RtPhaseModelIdentEq0100)this.getModel()).getRtPhaseData()).getEqObject();
                boolean var8;
                switch (var6.getName()) {
                    case "manualIdentPanel":
                        var8 = var7 != null || var2;
                        break;
                    case "undoidentPanel":
                        var8 = var7 == null || var2;
                        break;
                    case "skipSeparationPanel":
                        var8 = var7 != null || var2;
                        break;
                    default:
                        var8 = true;
                }

                if (var8) {
                    PhaseViewHelper0200.disableComponentTree(new Component[]{var6});
                }

                this.add(var6);
                this.add(new PhaseSeparator());
            }
        }

    }

    protected JPanel createManualIdentPanel() {
        JPanel var1 = PhaseSwingHelper.createExceptionPanel(PhaseColumnLayout.Layout.LAYOUT_TWO_1ST_WIDER_COLUMN);
        var1.setName("manualIdentPanel");
        var1.setUI(new PhaseExceptionPanelUI(var1));
        String var2 = I18nMessageUtility.getLocalizedMessage("PhaseEqmEqIdentification0210", "ManualIdent_Label");
        var1.add(PhaseSwingHelper.createMultiLineLabel(var2, 200 + PhaseColumnLayout.MIDDLE_COLUMN_WIDTH, "manualIdentLabel"), PhaseColumnLayout.Column.FIRST_COLUMN);
        JPanel var3 = PhaseSwingHelper.createPanel();
        var3.setLayout(new FlowLayout(0, 0, 0));
        JTextField var4 = PhaseSwingHelper.createJTextField(((RtPhaseModelIdentEq0100)this.getModel()).getStatus());
        var4.setPreferredSize(PREFERRED_SIZE);
        var4.setName("manualIdentEdit");
        var3.add(var4);
        var1.add(var3, PhaseColumnLayout.Column.SECOND_COLUMN);
        this.configureConfirmButton(var1, var4, "IDENTIFY_MANUALLY");
        return var1;
    }

    protected JPanel createUndoidentPanel() {
        JPanel var1 = PhaseSwingHelper.createExceptionPanel(PhaseColumnLayout.Layout.LAYOUT_TWO_1ST_WIDER_COLUMN);
        var1.setName("undoidentPanel");
        var1.setUI(new PhaseExceptionPanelUI(var1));
        String var2 = I18nMessageUtility.getLocalizedMessage("PhaseEqmEqIdentification0210", "UndoIdent_Label");
        var1.add(PhaseSwingHelper.createMultiLineLabel(var2, 200 + PhaseColumnLayout.MIDDLE_COLUMN_WIDTH, "undoidentLabel"), PhaseColumnLayout.Column.FIRST_COLUMN);
        if (((RtPhaseModelIdentEq0100)this.getModel()).getIdentifiedEquipment() != null) {
            JPanel var3 = PhaseSwingHelper.createPanel();
            var3.setLayout(new FlowLayout(0, 0, 0));
            JLabel var4 = PhaseSwingHelper.createJLabel(((RtPhaseModelIdentEq0100)this.getModel()).getIdentifiedEquipment().getIdentifier());
            var4.setPreferredSize(PREFERRED_SIZE);
            var3.add(var4);
            var1.add(var3, PhaseColumnLayout.Column.SECOND_COLUMN);
            this.configureConfirmButton(var1, var4, "UNDO_IDENTIFICATION");
        } else {
            ConfirmButton var5 = ((PhaseColumnLayout)var1.getLayout()).getConfirmButton();
            var5.setName("UNDO_IDENTIFICATION");
        }

        return var1;
    }

    protected JPanel createSkipIdentPanel() {
        JPanel var1 = PhaseSwingHelper.createExceptionPanel(PhaseColumnLayout.Layout.LAYOUT_SINGLE_COLUMN);
        var1.setName("skipSeparationPanel");
        var1.setUI(new PhaseExceptionPanelUI(var1));
        String var2 = I18nMessageUtility.getLocalizedMessage("PhaseEqmEqIdentification0210", "skipIdentification_Label");
        var1.add(PhaseSwingHelper.createMultiLineLabel(var2, 200 + PhaseColumnLayout.MIDDLE_COLUMN_WIDTH + PhaseColumnLayout.RIGHT_COLUMN_WIDTH, "skipSeparationLabel"), PhaseColumnLayout.Column.FIRST_COLUMN);
        this.configureConfirmButton(var1, (JComponent)null, "IDENTIFICATION_SKIPPED");
        return var1;
    }

    private void configureConfirmButton(JPanel exceptionPanel, final JComponent equipmentIdentifier, final String checkKey) {
        ConfirmButton var4 = ((PhaseColumnLayout)exceptionPanel.getLayout()).getConfirmButton();
        var4.addActionListener(new ActionListener() {
            public void actionPerformed(final ActionEvent e) {
                if (checkKey.equals("IDENTIFY_MANUALLY")) {
                    RtPhaseExceptionViewIdentEq0100.this.fireViewPropertyChange(checkKey, (Object)null, ((JTextField)equipmentIdentifier).getText());
                } else if (checkKey.equals("UNDO_IDENTIFICATION")) {
                    RtPhaseExceptionViewIdentEq0100.this.fireViewPropertyChange(checkKey, (Object)null, ((JLabel)equipmentIdentifier).getText());
                } else {
                    if (!checkKey.equals("IDENTIFICATION_SKIPPED")) {
                        throw new MESRuntimeException("no valid signature check-key");
                    }

                    RtPhaseExceptionViewIdentEq0100.this.fireViewPropertyChange(checkKey, (Object)null, (Object)null);
                }

            }
        });
        var4.setName(checkKey);
    }

    public static int displayParametrizedExceptionDialogAndReturnResult(final IMESExceptionRecord.RiskClass risk, final String exceptionCheckKey, final AbstractPhaseExecutor executor, final String dialogMsg, final String additionalInfo) {
        return PhaseSystemTriggeredExceptionHandler.recordException(executor, dialogMsg, additionalInfo, risk, exceptionCheckKey);
    }

    static {
        PREFERRED_SIZE = new Dimension(PhaseColumnLayout.RIGHT_COLUMN_WIDTH - 9, 30);
    }
}
