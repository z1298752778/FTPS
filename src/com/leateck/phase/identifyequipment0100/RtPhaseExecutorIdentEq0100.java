package com.leateck.phase.identifyequipment0100;

import java.beans.PropertyChangeEvent;
import java.io.Serializable;
import java.math.BigDecimal;
import java.util.*;
import java.util.concurrent.Callable;

import com.datasweep.compatibility.client.*;
import com.datasweep.compatibility.ui.Time;
import com.leateck.phase.identifyequipment0100.propertylist.EquipmentPropertyListAdapter0100;
import com.rockwell.mes.apps.ebr.ifc.phase.IPhaseCompleter;
import com.rockwell.mes.apps.ebr.ifc.phase.ui.eqpropertylist.EquipmentPropertyListPlugin;
import com.rockwell.mes.apps.masterdata.impl.data.eqm.EquipmentEntityDataHandler;
import com.rockwell.mes.apps.masterdata.impl.data.eqm.EquipmentEntityDataHolder;
import com.rockwell.mes.apps.masterdata.impl.data.eqm.EquipmentObjectType;
import com.rockwell.mes.clientfw.pec.ifc.dialog.ErrorDialogWithDetails;
import com.rockwell.mes.commons.base.ifc.choicelist.IMESChoiceElement;
import com.rockwell.mes.commons.base.ifc.choicelist.MESChoiceListHelper;
import com.rockwell.mes.commons.base.ifc.exceptions.MESInvalidBarcodeException;
import com.rockwell.mes.commons.base.ifc.exceptions.MESRuntimeException;
import com.rockwell.mes.commons.base.ifc.functional.MESDuration;
import com.rockwell.mes.commons.base.ifc.i18n.I18nMessageUtility;
import com.rockwell.mes.commons.base.ifc.objects.MESObjectDeletedCheckedException;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import com.rockwell.mes.commons.base.ifc.services.ServiceFactory;
import com.rockwell.mes.commons.base.ifc.services.TransactionInterceptor;
import com.rockwell.mes.commons.base.ifc.utility.*;
import com.rockwell.mes.commons.deviation.ifc.IESignatureExecutor;
import com.rockwell.mes.commons.deviation.ifc.exceptionrecording.IMESExceptionRecord;
import com.rockwell.mes.commons.parameter.bool.MESParamBoolean0100;
import com.rockwell.mes.commons.parameter.equipmentobject.MESParamEqObject0200;
import com.rockwell.mes.commons.parameter.exceptiondef.MESParamExceptionDef0300;
import com.rockwell.mes.commons.parameter.phasecompletionmode.MESParamCompletionMode0200;
import com.rockwell.mes.commons.parameter.phasecompletionmode.PhaseCompletionMode0200;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseExceptionView0200;
import com.rockwell.mes.commons.shared.phase.mvc.AbstractPhaseExecutor0200;
import com.rockwell.mes.commons.shared.phase.mvc.PhaseViewHelper0200;
import com.rockwell.mes.parameter.eqmstatuscheckdef.MESParamEqStatCheckDef0100;
import com.rockwell.mes.parameter.phaseidentificationmode.MESParamIdentMode0100;
import com.rockwell.mes.parameter.phaseidentificationmode.PhaseIdentificationMode0100;
import com.rockwell.mes.services.eqm.ifc.GxPContextMap;
import com.rockwell.mes.services.eqm.ifc.IGxPContextMapService;
import com.rockwell.mes.services.s88.ifc.IS88EquipmentExecutionService;
import com.rockwell.mes.services.s88.ifc.MESReleaseGroupException;
import com.rockwell.mes.services.s88.ifc.execution.ExecuteInBoundContextConfiguration;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;
import com.rockwell.mes.services.s88.ifc.execution.equipment.*;
import com.rockwell.mes.services.s88.ifc.processdata.IMESRtPhaseOutput;
import com.rockwell.mes.services.s88.ifc.recipe.IMESPhase;
import com.rockwell.mes.services.s88.ifc.recipe.IMESProcessParameterInstance;
import com.rockwell.mes.services.s88.ifc.recipe.equipment.IMESEquipmentPropertyReq;
import com.rockwell.mes.services.s88equipment.ifc.*;
import com.rockwell.mes.services.s88equipment.ifc.statusgraph.IMESS88StatusGraphAssignment;
import org.apache.commons.lang3.StringUtils;
import org.apache.commons.logging.Log;
import org.apache.commons.logging.LogFactory;

/**
 * TODO: Please enter the description of this type. This is mandatory!
 * <p>
 * This runtime phase executor skeleton is generated by the PhaseLibManager.
 * <p>
 * <p>
 * TODO: @author UserName, (c) Copyright 2013 Rockwell Automation Technologies, Inc. All Rights Reserved.
 */
public class RtPhaseExecutorIdentEq0100 extends AbstractPhaseExecutor0200<RtPhaseModelIdentEq0100, RtPhaseViewIdentEq0100, RtPhaseExceptionViewIdentEq0100, RtPhaseActionViewIdentEq0100> {
    private static final Log LOGGER = LogFactory.getLog(RtPhaseExecutorIdentEq0100.class);
    public static final String MSGPACK = "PhaseEqmEqIdentification0210";
    private static final String MSGPACK_EQM_VALIDATION = "eqm.validation";
    private static final String MSG_PACK_ERROR_EQUIPMENT_EXPIRY_TRIGGER_FAILURE = "pec_ExceptionMessage";
    private static final String ERROR_EQUIPMENT_EXPIRY_TRIGGER_FAILURE = "cannotIdentifyExpiryTriggerFailure_ErrorMsg";
    private static final String ERROR_EQUIPMENT_EXPIRY_TRIGGER_FAILURE_ON_GROUP = "cannotIdentifyExpiryTriggerGroupFailure_ErrorMsg";
    private IMESS88Equipment equipmentIdentified;
    private IMESS88Equipment equipmentScanned;
    private final IS88EquipmentExecutionService eqmS88ExecutionService = (IS88EquipmentExecutionService) ServiceFactory.getService(IS88EquipmentExecutionService.class);
    private final IS88EquipmentService eqmS88Service = (IS88EquipmentService) ServiceFactory.getService(IS88EquipmentService.class);
    private List<EquipmentClassStatusValidationErrorResult> classStatusValidationError;
    private EquipmentEntityStatusValidationErrorResult entityStatusValidationError;
    private EquipmentReqValidationErrorResult propertyRequirementsValidationError;
    private String validationErrorMsg = "";
    private String dialogMsg = "";
    private IMESExceptionRecord.RiskClass maxRisk = null;
    private EquipmentPropertyListPlugin propertyListPlugin;

    public RtPhaseExecutorIdentEq0100(IPhaseCompleter inPhaseCompleter, IMESRtPhase inRtPhase) {
        super(inPhaseCompleter, inRtPhase);
    }

    public RtPhaseExecutorIdentEq0100(IMESPhase inPhase, ActivitySetStep inStep) {
        super(inPhase, inStep);
    }

    public void exceptionCanceled(String checkKey) {
        RtPhaseExecutorIdentEq0100.ShowErrorDialogException var2 = null;
        AutoWaitCursor var3 = new AutoWaitCursor(this.getView());
        Throwable var4 = null;

        try {
            if ("VALIDATION_CHECK".equals(checkKey)) {
                this.writeLogbookEntries();

                try {
                    this.releaseEquipment(this.equipmentIdentified);
                } catch (RtPhaseExecutorIdentEq0100.ShowErrorDialogException var14) {
                    var2 = var14;
                }
            }

            ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) null);
        } catch (Throwable var15) {
            var4 = var15;
            throw var15;
        } finally {
            if (var3 != null) {
                if (var4 != null) {
                    try {
                        var3.close();
                    } catch (Throwable var13) {
                        var4.addSuppressed(var13);
                    }
                } else {
                    var3.close();
                }
            }

        }

        if (var2 != null) {
            var2.showErrorDialog();
        }

    }

    protected void exceptionTransactionCallback(String checkKey, IMESExceptionRecord exceptionRecord, IESignatureExecutor sigExecutor) {
        RtPhaseExecutorIdentEq0100.ShowErrorDialogException var4 = null;
        AutoWaitCursor var5 = new AutoWaitCursor(this.getView());
        Throwable var6 = null;

        try {
            if ("UNDO_IDENTIFICATION".equals(checkKey)) {
                try {
                    this.releaseEquipment(((RtPhaseModelIdentEq0100) this.getModel()).getIdentifiedEquipment());
                } catch (RtPhaseExecutorIdentEq0100.ShowErrorDialogException var18) {
                    var4 = var18;
                }

                ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) null);
            } else if ("VALIDATION_CHECK".equals(checkKey)) {
                try {
                    this.bindEquipment(this.equipmentIdentified);
                } catch (RtPhaseExecutorIdentEq0100.ShowErrorDialogException var17) {
                    var4 = var17;
                }

                ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) null);
            }
        } catch (Throwable var19) {
            var6 = var19;
            throw var19;
        } finally {
            if (var5 != null) {
                if (var6 != null) {
                    try {
                        var5.close();
                    } catch (Throwable var16) {
                        var6.addSuppressed(var16);
                    }
                } else {
                    var5.close();
                }
            }
        }
        if (var4 != null) {
            var4.showErrorDialog();
        }

    }

    public void doAfterReturnFromExceptionView() {
        RtPhaseExecutorIdentEq0100.ShowErrorDialogException var1 = null;
        boolean var2 = true;
        AutoWaitCursor var3 = new AutoWaitCursor(this.getView(), var2);
        Throwable var4 = null;

        try {
            if (((RtPhaseModelIdentEq0100) this.getModel()).getEquipmentExceptionIdentifier() != null) {
                try {
                    this.identifyAndBindEquipment(((RtPhaseModelIdentEq0100) this.getModel()).getEquipmentExceptionIdentifier());
                } catch (RtPhaseExecutorIdentEq0100.ShowErrorDialogException var14) {
                    var1 = var14;
                }

                ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) null);
            }
        } catch (Throwable var15) {
            var4 = var15;
            throw var15;
        } finally {
            if (var3 != null) {
                if (var4 != null) {
                    try {
                        var3.close();
                    } catch (Throwable var13) {
                        var4.addSuppressed(var13);
                    }
                } else {
                    var3.close();
                }
            }

        }

        if (var1 != null) {
            var1.showErrorDialog();
        }

    }

    protected RtPhaseModelIdentEq0100 createModel() {
        return new RtPhaseModelIdentEq0100(this);
    }

    protected RtPhaseViewIdentEq0100 createView(RtPhaseModelIdentEq0100 theModel) {
        return new RtPhaseViewIdentEq0100(theModel);
    }

    protected RtPhaseExceptionViewIdentEq0100 createExceptionView(RtPhaseModelIdentEq0100 theModel) {
        return new RtPhaseExceptionViewIdentEq0100(theModel);
    }

    protected RtPhaseActionViewIdentEq0100 createActionView(RtPhaseModelIdentEq0100 theModel) {
        return new RtPhaseActionViewIdentEq0100(theModel);
    }

    public void exceptionSigned(String checkKey) {
        AutoWaitCursor var2 = new AutoWaitCursor(this.getView());
        Throwable var3 = null;

        try {
            if (checkKey.equals("IDENTIFICATION_SKIPPED")) {
                ((RtPhaseModelIdentEq0100) this.getModel()).setPhaseResult(RtPhaseModelIdentEq0100.PhaseResult.SKIPPED);
                ((RtPhaseModelIdentEq0100) this.getModel()).createPhaseData();
                this.triggerAutoCompleteAfterReturnFromExceptionView();
            }
        } catch (Throwable var12) {
            var3 = var12;
            throw var12;
        } finally {
            if (var2 != null) {
                if (var3 != null) {
                    try {
                        var2.close();
                    } catch (Throwable var11) {
                        var3.addSuppressed(var11);
                    }
                } else {
                    var2.close();
                }
            }

        }

    }

    public void addNumber(IMESS88Equipment equipment) {
        if (equipment != null && numberConfiguration()) {
            EquipmentEntityDataHandler dataHandler = (EquipmentEntityDataHandler) EquipmentObjectType.EQM_ENTITY.getDataHandler();
            try {
                EquipmentEntityDataHolder dataHolder = dataHandler.createProxy(equipment).getDataHolder();
                dataHolder.getObject().startMonitorChangeHistoryEvents();
                IMESS88Equipment holderObject = dataHolder.getObject();
                IMESEquipmentProperty<?> currentNumber = holderObject.getProperty(MessageConstants.PROPERTY_BATCH_NUMBE_CURRENT);
                if (currentNumber != null) {
                    int currentValue = currentNumber.getDecimalValue() != null ? currentNumber.getDecimalValue().intValue() : 0;
                    int result = currentValue + 1;
                    currentNumber.setDecimalValue(BigDecimal.valueOf(result));
                }
                dataHolder.save();
                dataHolder.getObject().finishMonitorChangeHistoryEvents();
            } catch (MESObjectDeletedCheckedException | DatasweepException e) {

                e.printStackTrace();
            }
        }
    }

    public Boolean setIsClean(IMESS88Equipment equipment) {
        if (equipment != null) {
            IMESEquipmentProperty<?> numberProperty = equipment.getProperty(MessageConstants.PROPERTY_BATCH_NUMBE);
            IMESEquipmentProperty<?> currentProperty = equipment.getProperty(MessageConstants.PROPERTY_BATCH_NUMBE_CURRENT);
            if (numberProperty != null && currentProperty != null && currentProperty.getDecimalValue() != null && numberProperty.getDecimalValue() != null) {
                return currentProperty.getDecimalValue().equals(numberProperty.getDecimalValue());
            }
        }
        return false;

    }

    protected void performPhaseCompletion() {
        //若过参“Add Number configuration”启用，则设备“当前连续生产批次数”属性值+1，同时更新设备的变更历史。
        addNumber(equipmentIdentified);
        //设置outPut
        MESRtPhaseOutputIdentEq0100 rtPhaseOutput = (MESRtPhaseOutputIdentEq0100) getRtPhase().getRtPhaseOutput();
        rtPhaseOutput.setIsClean(setIsClean(equipmentIdentified));
        final IMESS88Equipment eqObject = rtPhaseOutput.getEqObject();
        final String result = rtPhaseOutput.getResult();
        rtPhaseOutput.setEqId(rtPhaseOutput.getEqId());
        rtPhaseOutput.setEqObject(eqObject);
        rtPhaseOutput.setResult(result);
        rtPhaseOutput.setEqShortDescription(rtPhaseOutput.getEqShortDescription());
        rtPhaseOutput.setParent(rtPhaseOutput.getParent());
        final Response response = rtPhaseOutput.save(PCContext.getCurrentClientTime(), "", null);

        this.equipmentIdentified = null;
    }

    protected void autoCompletePhase() {
        if (this.isExceptionSigned("IDENTIFICATION_SKIPPED")) {
            super.autoCompletePhase();
        }

    }

    private String getLocalizedMessage(String msgID, String... args) {
        return I18nMessageUtility.getLocalizedMessage("LC_Phase_IdentifyEquipment0100", msgID, args);
    }

    protected boolean performPhaseCompletionCheck() {
        if (((RtPhaseModelIdentEq0100) this.getModel()).getIdentifiedEquipment() == null && !this.isExceptionSigned("IDENTIFICATION_SKIPPED")) {
            PhaseViewHelper0200.showErrorDialog(this.getRtPhase(), this.getLocalizedMessage("EqNotIdentified_ErrorMsg"));
            return false;
        } else {
            return true;
        }
    }

    public void propertyChange(final PropertyChangeEvent evt) {
        super.propertyChange(evt);
        String var2 = evt.getPropertyName();
        ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) evt.getNewValue());
        if (var2.equals("IDENTIFY_MANUALLY")) {
            try {
                this.equipmentIdentified = this.checkEqExist(((RtPhaseModelIdentEq0100) this.getModel()).getEquipmentExceptionIdentifier());
            } catch (RtPhaseExecutorIdentEq0100.ShowErrorDialogException var4) {
                var4.showErrorDialog();
            }

            if (this.equipmentIdentified != null) {
                this.fillManualIdentificationException();
            } else {
                ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) null);
            }
        } else if (var2.equals("UNDO_IDENTIFICATION")) {
            this.fillUndoIdentificationException();
        } else if (var2.equals("IDENTIFICATION_SKIPPED")) {
            this.fillSkipIdentificationException();
        }

    }

    protected void handleBarcode(final String barcode) {
        boolean var2 = ((RtPhaseModelIdentEq0100) this.getModel()).isExceptionSigned("IDENTIFICATION_SKIPPED");
        if (!var2) {
            LOGGER.debug("handleBarcode " + barcode);
            IEquipmentEntityBarcodeParser var3 = this.eqmS88Service.getEquipmentEntityBarcodeParser();

            try {
                var3.parse(barcode);
            } catch (MESInvalidBarcodeException var19) {
                PhaseViewHelper0200.showErrorDialog(this.getRtPhase(), var19.getLocalizedMessage());
                return;
            }

            String var4 = var3.getIdentifier();

            boolean var5;
            try {
                AutoWaitCursor var6 = new AutoWaitCursor(this.getView());
                Throwable var7 = null;

                try {
                    var5 = this.identifyAndBindEquipment(var4);
                } catch (Throwable var18) {
                    var7 = var18;
                    throw var18;
                } finally {
                    if (var6 != null) {
                        if (var7 != null) {
                            try {
                                var6.close();
                            } catch (Throwable var17) {
                                var7.addSuppressed(var17);
                            }
                        } else {
                            var6.close();
                        }
                    }

                }
            } catch (RtPhaseExecutorIdentEq0100.ShowErrorDialogException var21) {
                var21.showErrorDialog();
                return;
            }

            if (var5 && this.isModeAutoComplete()) {
                ((RtPhaseViewIdentEq0100) this.getView()).firePhaseConfirmed();
            }

        }
    }

    private boolean isModeAutoComplete() {
        MESParamCompletionMode0200 var1 = (MESParamCompletionMode0200) this.getProcessParameterData(MESParamCompletionMode0200.class, "Mode");
        PhaseCompletionMode0200 var2 = var1.getPhaseCompletionMode();
        return PhaseCompletionMode0200.AUTO_COMPLETE.equals(var2);
    }

    private boolean identifyAndBindEquipment(String equipmentIdentifier) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        LOGGER.debug("identifyEquipment(): " + equipmentIdentifier);
        if (StringUtils.isEmpty(equipmentIdentifier)) {
            return false;
        } else if (((RtPhaseModelIdentEq0100) this.model).getIdentifiedEquipment() != null) {
            String var15 = this.getLocalizedMessage("EqReqAlreadyIdent_ErrorMsg", equipmentIdentifier, ((RtPhaseModelIdentEq0100) this.model).getIdentifiedEquipment().getIdentifier());
            throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var15);
        } else {
            this.checkGroupingPrecondition(equipmentIdentifier);
            AutoWaitCursor var2 = new AutoWaitCursor(this.getView());
            Throwable var3 = null;

            boolean var4;
            try {
                var4 = this.doIdentifyAndBindEquipment(equipmentIdentifier);
            } catch (Throwable var13) {
                var3 = var13;
                throw var13;
            } finally {
                if (var2 != null) {
                    if (var3 != null) {
                        try {
                            var2.close();
                        } catch (Throwable var12) {
                            var3.addSuppressed(var12);
                        }
                    } else {
                        var2.close();
                    }
                }

            }

            return var4;
        }
    }

    private boolean doIdentifyAndBindEquipment(String equipmentIdentifier) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        this.equipmentScanned = this.checkEqExist(equipmentIdentifier);
        this.equipmentIdentified = this.equipmentScanned;
        if (this.equipmentScanned == null) {
            return false;
        } else {
            this.equipmentScanned.refreshAssignments();
            this.equipmentScanned.refreshAncestorReferences();
            this.equipmentIdentified = this.getEquipmentIdentifiedByEquipmentScanned();
            this.equipmentIdentified.refreshAssignments();
            this.checkGroupingCondition(this.equipmentIdentified);
            if (!this.identifyAndCheckExpiryTriggerFailures(this.equipmentIdentified)) {
                return false;
            } else {
                this.updatePropertyList();
                this.checkClassRequirements(this.equipmentIdentified);
                if (!this.checkValidationError(this.equipmentIdentified)) {
                    return false;
                } else {
                    String ErrorMsg = "";
                    //连续生产批次数临近处理
                    final String s = checkBatchNumber(this.equipmentIdentified);
                    //灭菌效期临近处理
                    final String s1 = checkSterilization(this.equipmentIdentified);
                    //清洁效期临近处理
                    final String s2 = checkClean(this.equipmentIdentified);

                    if (!"".equals(s)) {
                        if (!"".equals(ErrorMsg)) {
                            ErrorMsg = ErrorMsg + "\n" + s;
                        } else {
                            ErrorMsg = s;
                        }

                    }
                    if (!"".equals(s1)) {
                        if (!"".equals(ErrorMsg)) {
                            ErrorMsg = ErrorMsg + "\n" + s1;
                        } else {
                            ErrorMsg = s1;
                        }
                    }
                    if (!"".equals(s2)) {
                        if (!"".equals(ErrorMsg)) {
                            ErrorMsg = ErrorMsg + "\n" + s2;
                        } else {
                            ErrorMsg = s2;
                        }
                    }
                    if(!"".equals(ErrorMsg)){
                        PhaseViewHelper0200.showErrorDialog(this.rtPhase, ErrorMsg);
                    }
                    this.bindEquipment(this.equipmentIdentified);
                    return true;
                }
            }
        }
    }

    /**
     * 清洁效期临近处理
     *
     * @param equipment
     */
    public String checkClean(IMESS88Equipment equipment) {
        String result = "";
        if (equipment != null && getCleanCheck()) {
            //查询该设备是否配置“清洁效期临近提醒”属性、清洁转换模型
            final IMESS88StatusGraphAssignment roomCleaningRs1 = equipment.getStatusGraphAssignment("RoomCleaning_RS_1");
            IMESEquipmentProperty<?> cleanExpirationProperty = equipment.getProperty(MessageConstants.PROPERTY_CLEAN_EXPIRATION_DATE);
            if (roomCleaningRs1 != null && cleanExpirationProperty != null) {
                //获取设备清洁到期日
                Time expiryDate = roomCleaningRs1.getExpiryDate();
                //获取当前日期
                Time currentClientTime = PCContext.getCurrentClientTime();
                Time curTime = currentClientTime;
                //获取临近清洁日期
                MESDuration durationValue = cleanExpirationProperty.getDurationValue();
                if (durationValue != null) {
                    //判断是否达到清洁效期临近期内
                    Time time = currentClientTime.addDays(durationValue.getDaysSection()).addHours(durationValue.getHoursSection()).addMinutes(durationValue.getMinutesSection()).addSeconds(durationValue.getSecondsSection()).addMillis(durationValue.getMillisecondsSection());

                    Calendar calendar = time.getCalendar();
                    if (expiryDate != null) {
                        //如果 当前日期+临近提醒期间>=过期日 则提醒
                        final Calendar expiryDateCalendar = expiryDate.getCalendar();


                        if (calendar.after(expiryDateCalendar) || calendar.equals(expiryDateCalendar)) {
                            //距离清洁效期还有几天几时几分
                            final long decaleTimeInMillis = expiryDateCalendar.getTimeInMillis() - curTime.getCalendar().getTimeInMillis();


                            String day = decaleTimeInMillis / (24 * 60 * 60 * 1000) + "";
                            String hour = (decaleTimeInMillis % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000) + "";
                            String minute = (decaleTimeInMillis % (60 * 60 * 1000)) / (60 * 1000) + "";
                            //识别的设备临近清洁有效期，请及时清理设备！
                            result = this.getLocalizedMessage("CleanExpiredNear_ErrorMsg", day, hour, minute);
                        }

                    }
                }


            } else {
                //识别的设备未配置“清洁效期临近提醒”属性、清洁转换模型
                result = I18nMessageUtility.getLocalizedMessage(MessageConstants.MESSAGE_PACK, "CleanNotApplication_ErrorMsg");
            }

        }
        return result;

    }

    /**
     * 灭菌效期临近处理
     *
     * @param equipment
     */
    public String checkSterilization(IMESS88Equipment equipment) {
        String result = "";
        if (equipment != null && sterilizationCheck()) {
            //查询该设备是否配置“灭菌效期临近提醒”属性、灭菌转换模型
            IMESS88StatusGraphAssignment sterilizationLC1 = equipment.getStatusGraphAssignment(MessageConstants.STATUS_GRAPH_STERILIZATION);
            IMESEquipmentProperty<?> sterilizationExpirationProperty = equipment.getProperty(MessageConstants.PROPERTY_STERILIZATION_EXPIRATION_DATE);
            if (sterilizationLC1 != null && sterilizationExpirationProperty != null) {
                //获取灭菌到期日
                Time expiryDate = sterilizationLC1.getExpiryDate();
                //获取当前日期
                Time currentClientTime = PCContext.getCurrentClientTime();
                Time curTime = currentClientTime;
                Date date = new Date();

                //获取临近灭菌日期
                MESDuration durationValue = sterilizationExpirationProperty.getDurationValue();
                if (durationValue != null) {
                    //判断是否达到清洁效期临近期内
                    Time time1 = currentClientTime.addDays(durationValue.getDaysSection()).addHours(durationValue.getHoursSection()).addMinutes(durationValue.getMinutesSection()).addSeconds(durationValue.getSecondsSection()).addMillis(durationValue.getMillisecondsSection());
                    Calendar calendar = time1.getCalendar();
                    Date time = calendar.getTime();
                    if (expiryDate != null) {
                        //如果 当前日期+临近提醒期间>=过期日 则提醒
                        final Calendar expiryDateCalendar = expiryDate.getCalendar();
                        if (calendar.after(expiryDateCalendar) || calendar.equals(expiryDateCalendar)) {
                            //识别的设备临近灭菌有效期，请及时灭菌！
                            //距离清洁效期还有几天几时几分
                            final long decaleTimeInMillis = expiryDateCalendar.getTimeInMillis() - curTime.getCalendar().getTimeInMillis();


                            String day = decaleTimeInMillis / (24 * 60 * 60 * 1000) + "";
                            String hour = (decaleTimeInMillis % (24 * 60 * 60 * 1000)) / (60 * 60 * 1000) + "";
                            String minute = (decaleTimeInMillis % (60 * 60 * 1000)) / (60 * 1000) + "";
                            //识别的设备临近清洁有效期，请及时清理设备！
                            result = this.getLocalizedMessage("SterilizationExpired_ErrorMsg", day, hour, minute);

//
                        }

                    }
                }


            } else {
                //识别的设备未配置“灭菌效期临近提醒”属性、灭菌转换模型
                result = I18nMessageUtility.getLocalizedMessage(MessageConstants.MESSAGE_PACK, "SterilizationNotApplication_ErrorMsg");
            }

        }
        return result;

    }

    /**
     * 连续生产批次数临近处理
     *
     * @param equipment
     */
    public String checkBatchNumber(IMESS88Equipment equipment) {
        String results = "";
        if (equipment != null && batchNumberCheck()) {
            //查询该设备是否配置“连续生产批次数临近提醒”，“当前连续生产批次数”，“连续生产批次数”属性
            IMESEquipmentProperty<?> nearNumberProperty = equipment.getProperty(MessageConstants.PROPERTY_BATCH_NUMBE_NEAR);
            IMESEquipmentProperty<?> curentNumberProperty = equipment.getProperty(MessageConstants.PROPERTY_BATCH_NUMBE_CURRENT);
            IMESEquipmentProperty<?> batchNumberProperty = equipment.getProperty(MessageConstants.PROPERTY_BATCH_NUMBE);
            if (nearNumberProperty != null && curentNumberProperty != null && batchNumberProperty != null) {
                //临近批次数
                BigDecimal nearNumber = nearNumberProperty.getDecimalValue();
                //当前连续生产批次数
                BigDecimal curentNumber = curentNumberProperty.getDecimalValue();
                //连续生产批次数
                BigDecimal batchNumber = batchNumberProperty.getDecimalValue();
                //判断类型是否为正整数 ^[0-9]*$
                //if(nearNumber.matches("^[0-9]*$") && curentNumber.matches("^[0-9]*$")&& batchNumber.matches("^[0-9]*$")){
                if (nearNumber != null && curentNumber != null && batchNumber != null) {
                    //连续生成批次数-当前生产批次数 <= 临近批次数
                    Long result = batchNumber.longValue() - curentNumber.longValue();
                    if (result <= nearNumber.longValue()) {
                        //当前生产批次数临近连续生产总批次数,请及时处理
                        results = this.getLocalizedMessage("ProductBatchNear_ErrorMsg", result + "");
                    }
                } else {
                    //配置“连续生产批次数临近提醒”，“当前连续生产批次数”，“连续生产批次数”属性的值不能为空
                    results = I18nMessageUtility.getLocalizedMessage(MessageConstants.MESSAGE_PACK, "ProductBatchNumberNotNull_ErrorMsg");
                }

            } else {
                //识别的设备未配置“连续生产批次数临近提醒”，“当前连续生产批次数”，“连续生产批次数”属性
                results = I18nMessageUtility.getLocalizedMessage(MessageConstants.MESSAGE_PACK, "ProductBatchNumberNotApplication_ErrorMsg");
            }
        }
        return results;
    }

    /**
     * @return isCleanCheck
     */
    public boolean getCleanCheck() {
        MESParamBoolean0100 cleanCheck = getProcessParameterData(MESParamBoolean0100.class, "Clean check configuration");
        if (cleanCheck != null) {
            return cleanCheck.getEnabled();
        }
        return false;
    }

    /**
     * @return batchNumberCheck
     */
    public boolean batchNumberCheck() {
        MESParamBoolean0100 cleanCheck = getProcessParameterData(MESParamBoolean0100.class, "BatchNumber check configuration");
        if (cleanCheck != null) {
            return cleanCheck.getEnabled();
        }
        return false;
    }

    /**
     * @return sterilizationCheck
     */
    public boolean sterilizationCheck() {
        MESParamBoolean0100 cleanCheck = getProcessParameterData(MESParamBoolean0100.class, "Sterilization check configuration");
        if (cleanCheck != null) {
            return cleanCheck.getEnabled();
        }
        return false;
    }

    /**
     * @return numberConfiguration
     */
    public boolean numberConfiguration() {
        MESParamBoolean0100 cleanCheck = getProcessParameterData(MESParamBoolean0100.class, "Add Number configuration");
        if (cleanCheck != null) {
            return cleanCheck.getEnabled();
        }
        return false;
    }

    private void checkGroupingPrecondition(String equipmentIdentifier) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        MESParamEqObject0200 var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterGroupingParent();
        boolean var3 = var2 != null && var2.getEquipmentObject() != null;
        IMESProcessParameterInstance var4 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterGroupingParentWithoutData();
        boolean var5 = var4 != null && var4.hasInputExpression("equipmentObject");
        boolean var6 = var2 != null && var5 && !var3;
        boolean var7 = var2 != null && var3 && !this.parentIsBoundInCurrentUnitProcedureContext(var2.getEquipmentObject());
        if (var6 || var7) {
            String var8 = this.getLocalizedMessage("EqParentDoesNotExistButIsRequired_ErrorMsg", equipmentIdentifier);
            throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var8);
        }
    }

    private boolean parentIsBoundInCurrentUnitProcedureContext(IMESS88Equipment parentEquipment) {
        return this.eqmS88ExecutionService.isBoundInCurrentUnitProcedureContext(parentEquipment, this.getRtPhase());
    }

    private IMESS88Equipment getEquipmentIdentifiedByEquipmentScanned() throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        MESParamIdentMode0100 var1 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterIdentificationMode();
        PhaseIdentificationMode0100 var2 = var1.getPhaseIdentificationMode();
        String var3 = this.equipmentScanned.getIdentifier();
        String var7;
        switch (var2) {
            case ENTITY_OR_GROUP:
                if (this.equipmentScanned.isMemberOfGroup()) {
                    return this.equipmentScanned.getRootEntity();
                }

                return this.equipmentScanned;
            case GROUP_OF_ENTITIES:
                if (!this.equipmentScanned.isMemberOfGroup()) {
                    var7 = this.getLocalizedMessage("EqNotPartOfGroup_ErrorMsg", var3);
                    throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var7);
                }

                return this.equipmentScanned.getRootEntity();
            case SINGLE_ENTITY:
                if (this.equipmentScanned.isMemberOfGroup()) {
                    IMESS88Equipment var8 = this.equipmentScanned.getRootEntity();
                    String var9 = this.getLocalizedMessage("EqPartOfGroup_ErrorMsg", var3, var8.getIdentifier());
                    throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var9);
                }

                return this.equipmentScanned;
            case CHILD_ENTITY:
                if (!this.equipmentScanned.isMemberOfGroup()) {
                    var7 = this.getLocalizedMessage("EqIsNotBoundChildOfGroup_ErrorMsg", var3);
                    throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var7);
                } else {
                    boolean var4 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterIdentifyInCurrentBindingContext().getEnabled();
                    IMESS88Equipment var5 = ((RtPhaseModelIdentEq0100) this.getModel()).getGroupingParentFromParameter();
                    if (var4 && var5 == null && this.equipmentScanned.getParentEntity() != null) {
                        return this.equipmentScanned;
                    }

                    String var6 = this.getLocalizedMessage("EqIsNotBoundChildOfGroup_ErrorMsg", var3);
                    throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var6);
                }
            default:
                return this.equipmentIdentified;
        }
    }

    private void checkGroupingCondition(final IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        MESParamEqObject0200 var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterGroupingParent();
        if (var2 != null) {
            IMESS88Equipment var3 = var2.getEquipmentObject();
            if (var3 != null) {
                LOGGER.debug("Parameter'Parent entity of group' exists and value of ident is:" + var3.getIdentifier());
                String var4;
                if (!eq.checkForNoParentChildEntityCycle(var3)) {
                    var4 = I18nMessageUtility.getLocalizedMessage("eqm.validation", "eqmGroupCycle_ErrorMsg", new String[]{eq.getIdentifier()});
                    LOGGER.error(var4);
                    throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var4);
                } else if (eq.getParentEntity() != null) {
                    var4 = I18nMessageUtility.getLocalizedMessage("eqm.validation", "eqmIsAlreadyChildOfAGroup_ErrorMsg", new String[]{eq.getIdentifier(), eq.getParentEntity().getIdentifier()});
                    LOGGER.error(var4);
                    throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var4);
                } else {
                    LOGGER.debug("Currenty entity has no parent yet. Delivers true.");
                }
            }
        }
    }

    private void bindEquipment(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        try {
            this.bindWithDescendants(eq);
            IMESS88Equipment var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getGroupingParentFromParameter();
            if (var2 != null) {
                this.eqmS88ExecutionService.changeParentOfChildEntity(eq, var2, this.getRtPhase());
                LOGGER.debug(String.format("Equipment '%s' successfully linked to Grouping Parent '%s'.", eq.getIdentifier(), var2.getIdentifier()));
            }

            this.setGxPContextWithDescendants(eq);
        } catch (Exception var5) {
            this.releaseEquipment(eq);

            try {
                this.resetGxPContextWithDescendants(eq);
            } catch (Exception var4) {
                throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), new Exception[]{var5, var4});
            }

            throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), new Exception[]{var5});
        }

        ((RtPhaseModelIdentEq0100) this.getModel()).setScannedEquipment(this.equipmentScanned);
        ((RtPhaseModelIdentEq0100) this.getModel()).setIdentifiedEquipment(eq);
    }

    private void bindWithDescendants(IMESS88Equipment eq) throws Exception {
        boolean var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterIdentifyInCurrentBindingContext().getEnabled();
        if (!var2) {
            if (eq.isMemberOfGroup()) {
                this.eqmS88ExecutionService.bindExcGroup(eq, this.getRtPhase());
            } else {
                this.eqmS88ExecutionService.bindExc(eq, this.getRtPhase());
            }

            LOGGER.debug(String.format("Equipment '%s'  bound, because parameter 'identify in current binding context' is FALSE.", eq.getIdentifier()));
        } else {
            LOGGER.debug(String.format("Equipment '%s' not bound again, parameter 'identify in current binding context' is TRUE.", eq.getIdentifier()));
        }

    }

    private void setGxPContextWithDescendants(IMESS88Equipment eq) throws Exception {
        boolean var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterIdentifyInCurrentBindingContext().getEnabled();
        if (!var2) {
            GxPContextMap var3 = ((IGxPContextMapService) ServiceFactory.getService(IGxPContextMapService.class)).createGxPContextForOrderStep(this.getOrderStep());
            ExecuteInBoundContextConfiguration var4 = new ExecuteInBoundContextConfiguration(false, false, true);
            if (eq.isMemberOfGroup()) {
                this.eqmS88ExecutionService.setGxPContextOnGroup(eq, this.getRtPhase(), var3, var4, true);
            } else {
                this.eqmS88ExecutionService.setGxPContext(eq, this.getRtPhase(), var3, var4, true);
            }

            LOGGER.debug(String.format("GXP context for Equipment '%s' set, because 'identify in current binding context' is FALSE.", eq.getIdentifier()));
        } else {
            LOGGER.debug(String.format("GXP context for Equipment '%s' NOT set, because 'identify in current binding context' is TRUE.", eq.getIdentifier()));
        }

    }

    private void resetGxPContextWithDescendants(IMESS88Equipment eq) throws Exception {
        boolean var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterIdentifyInCurrentBindingContext().getEnabled();
        if (!var2) {
            GxPContextMap var3 = ((IGxPContextMapService) ServiceFactory.getService(IGxPContextMapService.class)).createGxPContextForOrderStep(this.getOrderStep());
            ExecuteInBoundContextConfiguration var4 = new ExecuteInBoundContextConfiguration(false, false, true);
            if (eq.isMemberOfGroup()) {
                this.eqmS88ExecutionService.resetGxPContextOnGroup(eq, var3, this.getRtPhase(), (ProcessOrderItem) null, var4);
            } else {
                this.eqmS88ExecutionService.resetGxPContext(eq, var3, this.getRtPhase(), (ProcessOrderItem) null, var4);
            }

            LOGGER.debug(String.format("GXP context for Equipment '%s' reset, because 'identify in current binding context' is FALSE.", eq.getIdentifier()));
        } else {
            LOGGER.debug(String.format("GXP context for Equipment '%s' NOT reset, because 'identify in current binding context' is TRUE.", eq.getIdentifier()));
        }

    }

    private IMESS88Equipment checkEqExist(String equipmentIdentifier) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        IMESS88Equipment var2 = null;
        if (StringUtils.isNotEmpty(equipmentIdentifier)) {
            var2 = this.eqmS88Service.getEquipmentEntityByBarcode(equipmentIdentifier);
            if (var2 == null) {
                String var3 = this.getLocalizedMessage("EqNotExist_ErrorMsg", equipmentIdentifier);
                throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var3);
            }
        }

        return var2;
    }

    private boolean identifyAndCheckExpiryTriggerFailures(final IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        try {
            return this.identifyAndCheckExpiryTriggerFailuresWithDescendants(eq);
        } catch (Exception var3) {
            throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), new Exception[]{var3});
        }
    }

    private boolean identifyAndCheckExpiryTriggerFailuresWithDescendants(final IMESS88Equipment eq) throws Exception {
        List var2 = (List) TransactionInterceptor.callInTransactionImpl(new Callable<List<Pair<IMESS88Equipment, String>>>() {
            public List<Pair<IMESS88Equipment, String>> call() throws Exception {
                IMESRtPhase var1 = RtPhaseExecutorIdentEq0100.this.getRtPhase();
                boolean var2 = ((RtPhaseModelIdentEq0100) RtPhaseExecutorIdentEq0100.this.getModel()).getParameterIdentifyInCurrentBindingContext().getEnabled();
                ArrayList var4 = new ArrayList();
                if (eq.isMemberOfGroup()) {
                    List var5 = RtPhaseExecutorIdentEq0100.this.eqmS88ExecutionService.identifyEquipmentGroup(eq, var1, var2);
                    Iterator var6 = var5.iterator();

                    while (var6.hasNext()) {
                        Pair var7 = (Pair) var6.next();
                        IMESS88Equipment var8 = (IMESS88Equipment) var7.getFirst();
                        EquipmentIdentificationResult var9 = (EquipmentIdentificationResult) var7.getSecond();
                        Pair var10 = RtPhaseExecutorIdentEq0100.this.checkExpiryTriggerFailures(var8, var9);
                        if (var10 != null) {
                            var4.add(var10);
                        }
                    }
                } else {
                    EquipmentIdentificationResult var11 = RtPhaseExecutorIdentEq0100.this.eqmS88ExecutionService.identifyEquipment(eq, var1, var2);
                    Pair var12 = RtPhaseExecutorIdentEq0100.this.checkExpiryTriggerFailures(eq, var11);
                    if (var12 != null) {
                        var4.add(var12);
                    }
                }

                return var4;
            }
        });
        if (!CollectionUtility.isEmpty(var2)) {
            this.displayExpiryTriggerFailures(var2);
            this.releaseEquipment(eq);
            return false;
        } else {
            return true;
        }
    }

    private Pair<IMESS88Equipment, String> checkExpiryTriggerFailures(final IMESS88Equipment eq, final EquipmentIdentificationResult identificationResult) {
        String var3 = identificationResult.getCombinedErrorMsgWithContextOfExpiryTriggerFailures();
        return StringUtils.isEmpty(var3) ? null : new Pair(eq, var3);
    }

    private void displayExpiryTriggerFailures(final List<Pair<IMESS88Equipment, String>> errors) {
        String var2 = "";
        IMESS88Equipment var3 = null;

        Pair var5;
        for (Iterator var4 = errors.iterator(); var4.hasNext(); var3 = (IMESS88Equipment) var5.getFirst()) {
            var5 = (Pair) var4.next();
            if (var2.isEmpty()) {
                var2 = (String) var5.getSecond();
            } else {
                var2 = var2 + StringConstants.LINE_BREAK + StringConstants.LINE_BREAK + (String) var5.getSecond();
            }
        }

        IMESS88Equipment var7 = var3.getRootEntity();
        String var8 = var7.isMemberOfGroup() ? "cannotIdentifyExpiryTriggerGroupFailure_ErrorMsg" : "cannotIdentifyExpiryTriggerFailure_ErrorMsg";
        String var6 = I18nMessageUtility.getLocalizedMessage("pec_ExceptionMessage", var8, new String[]{var7.getIdentifier()});
        (new ErrorDialogWithDetails()).showDialog(var6, var2);
    }

    private void updatePropertyList() {
        this.initializePropertyListPluginIfNeeded();
        this.propertyListPlugin.updateEquipmentPropertyList(this.equipmentIdentified);
    }

    EquipmentPropertyListPlugin getPropertyListPluginExecutor() {
        this.initializePropertyListPluginIfNeeded();
        return this.propertyListPlugin;
    }

    private void initializePropertyListPluginIfNeeded() {
        if (this.propertyListPlugin == null) {
            this.propertyListPlugin = new EquipmentPropertyListPlugin(new EquipmentPropertyListAdapter0100(this));
        }

    }

    private void checkClassRequirements(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        EquipmentReqValidationErrorResult var2 = this.eqmS88ExecutionService.checkClassRequirements(eq, this.getRtPhase());
        if (var2 != null) {
            this.releaseEquipment(this.equipmentIdentified);
            if (var2.getFailureType().equals(EquipmentValidationErrorResult.EqmValidationFailureType.EQM_CLASS_NOT_MATCH)) {
                throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var2.getI18nErrorMessage());
            } else {
                throw new MESRuntimeException("Failure type '" + var2.getFailureType() + "' not expected");
            }
        }
    }

    private boolean checkValidationError(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        this.dialogMsg = "";
        this.validationErrorMsg = "";
        this.maxRisk = null;
        this.checkClassStatusValidationError(eq);
        this.checkEntityStatusValidationError(eq);
        this.checkPropertyRequirementsValidationError(eq);
        List var2 = eq.getDescendants();
        Collections.sort(var2, new RtPhaseExecutorIdentEq0100.EntityIdentifierComparator());
        Iterator var3 = var2.iterator();

        while (var3.hasNext()) {
            IMESS88Equipment var4 = (IMESS88Equipment) var3.next();
            this.checkEntityStatusValidationError(var4);
        }

        if (!this.validationErrorMsg.isEmpty()) {
            int var5 = RtPhaseExceptionViewIdentEq0100.displayParametrizedExceptionDialogAndReturnResult(this.maxRisk, "VALIDATION_CHECK", this, this.dialogMsg, this.validationErrorMsg);
            if (var5 == 2) {
                this.writeLogbookEntries();
                this.releaseEquipment(eq);
            }

            return false;
        } else {
            return true;
        }
    }

    private void checkClassStatusValidationError(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        MESParamEqStatCheckDef0100 var2 = (MESParamEqStatCheckDef0100) this.getProcessParameterData(MESParamEqStatCheckDef0100.class, "Equipment status check");
        String var3 = var2.getMinimumClassStatus();
        this.classStatusValidationError = this.eqmS88ExecutionService.checkClassStateExtended(this.equipmentIdentified, this.getRtPhase(), var3);
        if (!this.classStatusValidationError.isEmpty()) {
            Collections.sort(this.classStatusValidationError, new RtPhaseExecutorIdentEq0100.EquipmentClassStatusValidationClassIdentifierComparator());
            String var4 = "";
            String var5 = "";

            EquipmentClassStatusValidationErrorResult var7;
            for (Iterator var6 = this.classStatusValidationError.iterator(); var6.hasNext(); var5 = var5 + var7.getI18nErrorMessage() + StringConstants.LINE_BREAK + this.getLocalizedMessage("RequiredMinimumStatus_Label", var3) + StringConstants.LINE_BREAK) {
                var7 = (EquipmentClassStatusValidationErrorResult) var6.next();
                EquipmentValidationErrorResult.EqmValidationFailureType var8 = var7.getFailureType();
                IMESChoiceElement var9 = MESChoiceListHelper.getChoiceElement("RiskClass", var2.getRiskAssessment());
                this.maxRisk = IMESExceptionRecord.RiskClass.valueOf(var9);
                var4 = var4 + var7.getI18nErrorMessage() + StringConstants.LINE_BREAK;
                if (!var8.equals(EquipmentValidationErrorResult.EqmValidationFailureType.EQM_INVALID_CLASS_STATUS) && !var8.equals(EquipmentValidationErrorResult.EqmValidationFailureType.EQM_INVALID_CLASS_STATUS_REFERENCED)) {
                    IMESS88EquipmentClass var10 = var7.getValidatedClass();
                    if (var10 != null) {
                        this.eqmS88ExecutionService.writeLogbookEntryDenialClassStatus(this.equipmentIdentified, var10, this.getRtPhase());
                    }

                    this.releaseEquipment(eq);
                    throw new MESRuntimeException("Failure type '" + var8 + "' not expected");
                }
            }

            this.dialogMsg = var2.getExceptionText() + StringConstants.LINE_BREAK + var4;
            this.validationErrorMsg = var2.getExceptionText() + StringConstants.LINE_BREAK + var5;
        }

    }

    private void checkEntityStatusValidationError(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        MESParamEqStatCheckDef0100 var2 = (MESParamEqStatCheckDef0100) this.getProcessParameterData(MESParamEqStatCheckDef0100.class, "Equipment status check");
        String var3 = var2.getMinimumEntityStatus();
        this.entityStatusValidationError = this.eqmS88ExecutionService.checkEntityState(eq, this.getRtPhase(), var3);
        if (this.entityStatusValidationError != null) {
            EquipmentValidationErrorResult.EqmValidationFailureType var4 = this.entityStatusValidationError.getFailureType();
            IMESChoiceElement var5 = MESChoiceListHelper.getChoiceElement("RiskClass", var2.getRiskAssessment());
            this.maxRisk = IMESExceptionRecord.RiskClass.valueOf(var5);
            if (this.validationErrorMsg.isEmpty()) {
                this.dialogMsg = var2.getExceptionText() + StringConstants.LINE_BREAK + this.entityStatusValidationError.getI18nErrorMessage();
                this.validationErrorMsg = var2.getExceptionText() + StringConstants.LINE_BREAK;
            } else {
                this.dialogMsg = this.getLocalizedMessage("MultipleExceptions_ErrorMsg");
                this.validationErrorMsg = this.validationErrorMsg + StringConstants.LINE_BREAK + StringConstants.LINE_BREAK;
            }

            if (!var4.equals(EquipmentValidationErrorResult.EqmValidationFailureType.EQM_INVALID_ENTITY_STATUS)) {
                this.eqmS88ExecutionService.writeLogbookEntryDenialEntityStatus(eq, this.getRtPhase());
                IMESS88Equipment var6 = eq.getRootEntity() != null ? eq.getRootEntity() : eq;
                this.releaseEquipment(var6);
                throw new MESRuntimeException("Failure type '" + var4 + "' not expected");
            }

            this.validationErrorMsg = this.validationErrorMsg + this.entityStatusValidationError.getI18nErrorMessage() + StringConstants.LINE_BREAK + this.getLocalizedMessage("RequiredMinimumStatus_Label", var3);
        }

    }

    private void checkPropertyRequirementsValidationError(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        this.propertyRequirementsValidationError = this.eqmS88ExecutionService.checkPropertyRequirements(this.equipmentIdentified, this.getRtPhase());
        if (this.propertyRequirementsValidationError != null) {
            if (!this.propertyRequirementsValidationError.getFailureType().equals(EquipmentValidationErrorResult.EqmValidationFailureType.EQM_PROPERTIES_NOT_MATCH)) {
                this.eqmS88ExecutionService.writeLogbookEntryDenialPropertyReqs(this.equipmentIdentified, this.getRtPhase());
                this.releaseEquipment(eq);
                throw new MESRuntimeException("Failure type '" + this.propertyRequirementsValidationError.getFailureType() + "' not expected");
            }

            MESParamExceptionDef0300 var2 = (MESParamExceptionDef0300) this.getProcessParameterData(MESParamExceptionDef0300.class, "Property value check");
            IMESExceptionRecord.RiskClass var3 = AbstractPhaseExceptionView0200.getRiskAssessmentObject(var2);
            if (this.validationErrorMsg.isEmpty()) {
                this.dialogMsg = AbstractPhaseExceptionView0200.buildExceptionText(var2, this.getLocalizedMessage("EqReqNotSufficient_ErrorMsg", eq.getIdentifier()));
                this.maxRisk = var3;
            } else {
                this.dialogMsg = this.getLocalizedMessage("MultipleExceptions_ErrorMsg");
                if (this.maxRisk.compareTo(var3) < 0) {
                    this.maxRisk = var3;
                }

                this.validationErrorMsg = this.validationErrorMsg + StringConstants.LINE_BREAK + StringConstants.LINE_BREAK;
            }

            this.validationErrorMsg = this.validationErrorMsg + AbstractPhaseExceptionView0200.buildExceptionText(var2, this.getLocalizedMessage("EqReqNotSufficient_ErrorMsg", eq.getIdentifier()) + this.createConcatenatedPropertyValueCheckExceptionMsg(this.propertyRequirementsValidationError));
        }

    }

    private void writeLogbookEntries() {
        Iterator var1 = this.classStatusValidationError.iterator();

        while (var1.hasNext()) {
            EquipmentClassStatusValidationErrorResult var2 = (EquipmentClassStatusValidationErrorResult) var1.next();
            this.eqmS88ExecutionService.writeLogbookEntryDenialClassStatus(this.equipmentIdentified, var2.getValidatedClass(), this.rtPhase);
        }

        if (this.entityStatusValidationError != null) {
            this.eqmS88ExecutionService.writeLogbookEntryDenialEntityStatus(this.equipmentIdentified, this.getRtPhase());
        }

        if (this.propertyRequirementsValidationError != null) {
            this.eqmS88ExecutionService.writeLogbookEntryDenialPropertyReqs(this.equipmentIdentified, this.getRtPhase());
        }

    }

    private String createConcatenatedPropertyValueCheckExceptionMsg(EquipmentReqValidationErrorResult result) {
        StringBuilder var2 = new StringBuilder();
        Iterator var3 = result.getPropertiesResult().iterator();

        while (var3.hasNext()) {
            EquipmentPropertyValidationResult var4 = (EquipmentPropertyValidationResult) var3.next();
            if (var4 instanceof EquipmentGroupRuleValidationResult) {
                EquipmentGroupRuleValidationResult var5 = (EquipmentGroupRuleValidationResult) var4;
                var2.append(this.createErrorMessageForEquipmentGroupRuleValidationResult(var5));
            } else if (var4 instanceof EquipmentRuleValidationResult) {
                EquipmentRuleValidationResult var6 = (EquipmentRuleValidationResult) var4;
                var2.append(this.createErrorMessageForEquipmentRuleValidationResult(var6));
            } else {
                var2.append(this.createErrorMessageForEquipmentPropertyValidationResult(var4));
            }
        }

        return var2.toString();
    }

    private String createErrorMessageForEquipmentPropertyValidationResult(final EquipmentPropertyValidationResult validationResult) {
        StringBuilder var2 = new StringBuilder();
        IMESEquipmentPropertyReq var3 = (IMESEquipmentPropertyReq) validationResult.getRequired();
        String var4 = var3.getIdentifier();
        String var5 = var3.getUIRepresentation();
        String var6 = this.getRequiredValue(validationResult, var3);
        String var7 = this.getActualPropertyValue(validationResult);
        IMESEquipmentPropertyType var8 = var3.getEquipmentPropertyType();
        String var9 = var8 != null ? var8.getIdentifier() : "";
        var2.append(this.getLocalizedMessage("PropertyValueCheck_ExceptionMsg", var4, var5, var9, var6, var7));
        return var2.toString();
    }

    private String createErrorMessageForEquipmentRuleValidationResult(final EquipmentRuleValidationResult ruleValidationResult) {
        StringBuilder var2 = new StringBuilder();
        IMESEquipmentPropertyReq var3 = (IMESEquipmentPropertyReq) ruleValidationResult.getRequired();
        String var4 = var3.getIdentifier();
        String var5 = var3.getUIRepresentation();
        String var6 = this.getRequiredValue(ruleValidationResult, var3);
        String var7 = this.getActualPropertyValue(ruleValidationResult);
        IMESS88Equipment var8 = ruleValidationResult.getEquipmentEntity();
        String var9 = var8 != null ? var8.getIdentifier() : "";
        var2.append(this.getLocalizedMessage("PropertyValueCheck_Rule_ExceptionMsg", var4, var5, var6, var7, var9));
        if (ruleValidationResult.getActualResult() == null) {
            var2.append(StringConstants.LINE_BREAK);
            var2.append(ruleValidationResult.getI18nErrorMessage());
        }

        return var2.toString();
    }

    private String createErrorMessageForEquipmentGroupRuleValidationResult(final EquipmentGroupRuleValidationResult groupRuleValidationResult) {
        StringBuilder var2 = new StringBuilder();
        IMESEquipmentPropertyReq var3 = (IMESEquipmentPropertyReq) groupRuleValidationResult.getRequired();
        String var4 = var3.getIdentifier();
        String var5 = var3.getUIRepresentation();
        String var6 = this.getRequiredValue(groupRuleValidationResult, var3);
        Map var7 = groupRuleValidationResult.getEquipmentGroupRuleValidationResultsPerType();
        Iterator var8 = var7.values().iterator();

        while (var8.hasNext()) {
            List var9 = (List) var8.next();
            EquipmentRuleValidationResult var10 = (EquipmentRuleValidationResult) var9.get(0);
            String var11 = this.getActualPropertyValue(var10);
            List var12 = EquipmentGroupRuleValidationResult.getEquipmentEntities(var9);
            ArrayList var13 = new ArrayList();
            Iterator var14 = var12.iterator();

            while (var14.hasNext()) {
                IMESS88Equipment var15 = (IMESS88Equipment) var14.next();
                String var16 = var15 != null ? var15.getIdentifier() : "";
                var13.add(var16);
            }

            Collections.sort(var13);
            String var17 = StringUtilsEx.buildCommaSeparatedListForUI(var13);
            var2.append(this.getLocalizedMessage("PropertyValueCheck_Rule_ExceptionMsg", var4, var5, var6, var11, var17));
            if (((EquipmentRuleValidationResult) var9.get(0)).getActualResult() == null) {
                var2.append(StringConstants.LINE_BREAK);
                var2.append(((EquipmentRuleValidationResult) var9.get(0)).getI18nErrorMessage());
            }
        }

        return var2.toString();
    }

    private String getRequiredValue(EquipmentPropertyValidationResult validationResult, IMESEquipmentPropertyReq propReq) {
        String var3;
        if (validationResult instanceof EquipmentRuleValidationResult) {
            var3 = I18nMessageUtility.getI18NValue(true);
        } else if (propReq != null) {
            var3 = propReq.getValueOnlyDisplayString();
        } else {
            var3 = I18nMessageUtility.getNALabel();
        }

        return var3;
    }

    private String getActualPropertyValue(EquipmentPropertyValidationResult validationResult) {
        IMESEquipmentProperty var3 = validationResult.getProperty();
        String var2;
        if (var3 instanceof IMESFSMEquipmentProperty) {
            var2 = var3.getPropertyValue() != null ? var3.getPropertyValue().toString() : I18nMessageUtility.getNALabel();
        } else if (validationResult instanceof EquipmentRuleValidationResult) {
            Boolean var4 = ((EquipmentRuleValidationResult) validationResult).getActualResult();
            var2 = I18nMessageUtility.getI18NValue(var4);
        } else if (var3 != null) {
            var2 = var3.getValueOnlyDisplayString();
        } else {
            var2 = I18nMessageUtility.getNALabel();
        }

        return var2;
    }

    private void releaseEquipment(IMESS88Equipment eq) throws RtPhaseExecutorIdentEq0100.ShowErrorDialogException {
        LOGGER.debug("unbindEquipment: " + eq.getIdentifier());

        try {
            this.releaseWithDescendants(eq);
            IMESS88Equipment var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getGroupingParentFromParameter();
            if (var2 != null && eq.getParentEntity() != null) {
                this.eqmS88ExecutionService.changeParentOfChildEntity(eq, (IMESS88Equipment) null, this.getRtPhase());
                LOGGER.debug(String.format("Equipment '%s' successfully separated from Grouping Parent '%s'.", eq.getIdentifier(), var2.getIdentifier()));
            }
        } catch (MESReleaseGroupException var4) {
            String var3 = (String) ((Pair) var4.getAllErrors().get(0)).getSecond();
            throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), var3);
        } catch (Exception var5) {
            throw new RtPhaseExecutorIdentEq0100.ShowErrorDialogException(this.getRtPhase(), new Exception[]{var5});
        }

        ((RtPhaseModelIdentEq0100) this.getModel()).setScannedEquipment((IMESS88Equipment) null);
        ((RtPhaseModelIdentEq0100) this.getModel()).setIdentifiedEquipment((IMESS88Equipment) null);
        ((RtPhaseModelIdentEq0100) this.getModel()).setEquipmentExceptionIdentifier((String) null);
    }

    private void releaseWithDescendants(IMESS88Equipment eq) throws Exception {
        boolean var2 = ((RtPhaseModelIdentEq0100) this.getModel()).getParameterIdentifyInCurrentBindingContext().getEnabled();
        if (!var2) {
            IMESRtPhase var3 = this.getRtPhase();
            if (eq.isMemberOfGroup()) {
                this.eqmS88ExecutionService.releaseExcGroup(eq, var3);
            } else {
                this.eqmS88ExecutionService.releaseExc(eq, var3);
            }

            LOGGER.debug(String.format("Equipment '%s' released, because parameter 'identify in current binding context' is FALSE.", eq.getIdentifier()));
        } else {
            LOGGER.debug(String.format("Equipment '%s' NOT released, because parameter 'identify in current binding context' is TRUE.", eq.getIdentifier()));
        }

    }

    private void fillManualIdentificationException() {
        String var1 = this.getLocalizedMessage("EnterIdentifierManually_ExceptionMsg", ((RtPhaseModelIdentEq0100) this.getModel()).getEquipmentExceptionIdentifier());
        RtPhaseExceptionViewIdentEq0100.fillParameterizedException("Enter identifier manually", "IDENTIFY_MANUALLY", this, var1);
    }

    private void fillUndoIdentificationException() {
        if (((RtPhaseModelIdentEq0100) this.getModel()).getEquipmentExceptionIdentifier().equals(((RtPhaseModelIdentEq0100) this.getModel()).getIdentifiedEquipment().getIdentifier())) {
            String var1 = PhaseViewHelper0200.formatIdentifierAndShortDescription("PhaseEqmEqIdentification0210", "UndoIdentNoShortDescription_ExceptionMsg", "UndoIdentWithShortDescription_ExceptionMsg", ((RtPhaseModelIdentEq0100) this.getModel()).getIdentifiedEquipment().getIdentifier(), ((RtPhaseModelIdentEq0100) this.getModel()).getIdentifiedEquipment().getShortDescription());
            RtPhaseExceptionViewIdentEq0100.fillParameterizedException("Undo identification", "UNDO_IDENTIFICATION", this, var1);
        }

    }

    private void fillSkipIdentificationException() {
        String var1 = this.getLocalizedMessage("skipIdentification_ExceptionMsg", ((RtPhaseModelIdentEq0100) this.getModel()).getEquipmentExceptionIdentifier());
        RtPhaseExceptionViewIdentEq0100.fillParameterizedException("Skip identification", "IDENTIFICATION_SKIPPED", this, var1);
    }

    private static class ShowErrorDialogException extends Exception {
        private static final long serialVersionUID = 1L;
        private final IMESRtPhase rtPhase;
        private final List<String> localizedErrorMessages;

        private ShowErrorDialogException(IMESRtPhase forRtPhase, String localizedMessage) {
            this.localizedErrorMessages = new ArrayList();
            this.rtPhase = forRtPhase;
            this.localizedErrorMessages.add(localizedMessage);
        }

        private ShowErrorDialogException(IMESRtPhase forRtPhase, Exception... wrappedExceptions) {
            this.localizedErrorMessages = new ArrayList();
            this.rtPhase = forRtPhase;
            Exception[] var3 = wrappedExceptions;
            int var4 = wrappedExceptions.length;

            for (int var5 = 0; var5 < var4; ++var5) {
                Exception var6 = var3[var5];
                this.localizedErrorMessages.add(var6.getLocalizedMessage());
            }

        }

        private void showErrorDialog() {
            Iterator var1 = this.localizedErrorMessages.iterator();

            while (var1.hasNext()) {
                String var2 = (String) var1.next();
                PhaseViewHelper0200.showErrorDialog(this.rtPhase, var2);
            }

        }
    }

    private static final class EquipmentClassStatusValidationClassIdentifierComparator implements Comparator<EquipmentClassStatusValidationErrorResult>, Serializable {
        private static final long serialVersionUID = -2995514814171078847L;

        private EquipmentClassStatusValidationClassIdentifierComparator() {
        }

        public int compare(EquipmentClassStatusValidationErrorResult o1, EquipmentClassStatusValidationErrorResult o2) {
            int var3 = ObjectUtilsEx.compare(o1.getValidatedEquipment().getIdentifier(), o2.getValidatedEquipment().getIdentifier());
            if (var3 != 0) {
                return var3;
            } else {
                IMESS88EquipmentClass var4 = o1.getValidatedClass();
                IMESS88EquipmentClass var5 = o2.getValidatedClass();
                String var6 = var4 != null ? var4.getIdentifier() : "";
                String var7 = var5 != null ? var5.getIdentifier() : "";
                var3 = ObjectUtilsEx.compare(var6, var7);
                return var3 != 0 ? var3 : ObjectUtilsEx.compare(o1.getFailureType().ordinal(), o2.getFailureType().ordinal());
            }
        }
    }

    private static final class EntityIdentifierComparator implements Comparator<IMESS88Equipment>, Serializable {
        private static final long serialVersionUID = -2995514814171078847L;

        private EntityIdentifierComparator() {
        }

        public int compare(IMESS88Equipment o1, IMESS88Equipment o2) {
            return ObjectUtilsEx.compare(o1.getIdentifier(), o2.getIdentifier());
        }
    }
}

