package com.leateck.phase.materialalternativeidentification0010;

/**
 * This file is generated by the PhaseLibManager
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;

import com.datasweep.compatibility.client.MeasuredValue;


/**
 * Generated class definition
 */
public abstract class MESGeneratedRtPhaseDataMatAlterIdent0010Filter extends MESATObjectFilter  {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    private static final String ATDEFINITION_NAME = "SC_PhDatMatAlterIdent0010";

    /**
     * Generated method definition
     *
     * @param server The Server object
     */
    public MESGeneratedRtPhaseDataMatAlterIdent0010Filter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated method definition
     *
     */
    public MESGeneratedRtPhaseDataMatAlterIdent0010Filter() {
        super(PCContext.getServerImpl(), ATDEFINITION_NAME);
    }

    /**
     * Generated method definition
     *
     * @return the list of the objects
     */
    @Override     
    public List<MESRtPhaseDataMatAlterIdent0010> getFilteredObjects () {
        return MESATObject.getFilteredMESATObjectList(this, MESRtPhaseDataMatAlterIdent0010.class);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forParentEqualTo(IMESRtPhase value) //
            throws DatasweepException {
        String columnName = MESRtPhaseDataMatAlterIdent0010.COL_NAME_PARENT;
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo(columnName, Long.valueOf(value.getKey()));
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forParentNotEqualTo(IMESRtPhase value) //
            throws DatasweepException {
        String columnName = MESRtPhaseDataMatAlterIdent0010.COL_NAME_PARENT;
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo(columnName, Long.valueOf(value.getKey()));
    }



    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialIDEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_materialID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialIDNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_materialID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialIDContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_materialID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialIDStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_materialID", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMfcPosEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_mfcPos", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMfcPosNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_mfcPos", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMfcPosContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_mfcPos", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMfcPosStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_mfcPos", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forIsHeaderEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_isHeader", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forIsHeaderNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_isHeader", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialDescriptionEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_materialDescription", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialDescriptionNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_materialDescription", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialDescriptionContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_materialDescription", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forMaterialDescriptionStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_materialDescription", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forCommentToExecutionEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_commentToExecution", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forCommentToExecutionNotEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_commentToExecution", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forBatchIDEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_batchID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forBatchIDNotEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_batchID", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forSublotIDEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_sublotID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forSublotIDNotEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_sublotID", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forLogisticUnitIDEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_logisticUnitID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forLogisticUnitIDNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_logisticUnitID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forLogisticUnitIDContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_logisticUnitID", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forLogisticUnitIDStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_logisticUnitID", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forBatchSublotDisplStrEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_batchSublotDisplStr", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forBatchSublotDisplStrNotEqualTo(byte[] value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_batchSublotDisplStr", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_plannedQty", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_plannedQty", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forIdentifiedQtyEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_identifiedQty", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forIdentifiedQtyNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_identifiedQty", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forIsUnidentifiedEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_isUnidentified", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forIsUnidentifiedNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_isUnidentified", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forAccountedQtyEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_accountedQty", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forAccountedQtyNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_accountedQty", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyWithLimitsEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_plannedQtyWithLimits", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyWithLimitsNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_plannedQtyWithLimits", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyWithLimitsContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_plannedQtyWithLimits", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyWithLimitsStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_plannedQtyWithLimits", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyDisplStringEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_plannedQtyDisplString", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyDisplStringNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_plannedQtyDisplString", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyDisplStringContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_plannedQtyDisplString", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forPlannedQtyDisplStringStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_plannedQtyDisplString", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forAccountingStatusEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_accountingStatus", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forAccountingStatusNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_accountingStatus", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forAccountingStatusContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_accountingStatus", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forAccountingStatusStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_accountingStatus", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forLocalIdentifiedEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_localIdentified", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forLocalIdentifiedNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_localIdentified", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forResultEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameEqualTo("SC_Result", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forResultNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameNotEqualTo("SC_Result", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forResultContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameContaining("SC_Result", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataMatAlterIdent0010Filter forResultStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataMatAlterIdent0010Filter) forColumnNameStartingWith("SC_Result", value);
    }

}
