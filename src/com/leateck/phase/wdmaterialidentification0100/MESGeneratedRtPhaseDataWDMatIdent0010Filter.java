package com.leateck.phase.wdmaterialidentification0100;

/**
 * This file is generated by the PhaseLibManager
 *
 * Please do not modify this file manually !!
 */
import java.util.List;

import com.datasweep.compatibility.client.DatasweepException;
import com.datasweep.compatibility.client.Server;
import com.rockwell.mes.commons.base.ifc.objects.MESATObject;
import com.rockwell.mes.commons.base.ifc.objects.MESATObjectFilter;
import com.rockwell.mes.commons.base.ifc.services.PCContext;
import com.rockwell.mes.services.s88.ifc.execution.IMESRtPhase;

import com.rockwell.mes.services.s88equipment.ifc.IMESS88Equipment; 
import com.datasweep.compatibility.client.MeasuredValue;


/**
 * Generated class definition
 */
public abstract class MESGeneratedRtPhaseDataWDMatIdent0010Filter extends MESATObjectFilter  {

    /** Generated attribute definition */
    private static final long serialVersionUID = 1L;

    /** Generated attribute definition */
    private static final String ATDEFINITION_NAME = "LC_PhDatWDMatIdent0010";

    /**
     * Generated method definition
     *
     * @param server The Server object
     */
    public MESGeneratedRtPhaseDataWDMatIdent0010Filter(Server server) {
        super(server, ATDEFINITION_NAME);
    }

    /**
     * Generated method definition
     *
     */
    public MESGeneratedRtPhaseDataWDMatIdent0010Filter() {
        super(PCContext.getServerImpl(), ATDEFINITION_NAME);
    }

    /**
     * Generated method definition
     *
     * @return the list of the objects
     */
    @Override     
    public List<MESRtPhaseDataWDMatIdent0010> getFilteredObjects () {
        return MESATObject.getFilteredMESATObjectList(this, MESRtPhaseDataWDMatIdent0010.class);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forParentEqualTo(IMESRtPhase value) //
            throws DatasweepException {
        String columnName = MESRtPhaseDataWDMatIdent0010.COL_NAME_PARENT;
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo(columnName, Long.valueOf(value.getKey()));
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forParentNotEqualTo(IMESRtPhase value) //
            throws DatasweepException {
        String columnName = MESRtPhaseDataWDMatIdent0010.COL_NAME_PARENT;
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo(columnName, Long.valueOf(value.getKey()));
    }



    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSublotIdentifierEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_sublotIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSublotIdentifierNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_sublotIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSublotIdentifierContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_sublotIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSublotIdentifierStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_sublotIdentifier", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forBatchIdentifierEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_batchIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forBatchIdentifierNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_batchIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forBatchIdentifierContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_batchIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forBatchIdentifierStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_batchIdentifier", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerIdEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_srcContainerId", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerIdNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_srcContainerId", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerIdContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_srcContainerId", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerIdStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_srcContainerId", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerShortDescEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_srcContainerShortDesc", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerShortDescNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_srcContainerShortDesc", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerShortDescContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_srcContainerShortDesc", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerShortDescStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_srcContainerShortDesc", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerObjectEqualTo(IMESS88Equipment value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_srcContainerObject", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSrcContainerObjectNotEqualTo(IMESS88Equipment value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_srcContainerObject", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forOriginalQuantityEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_originalQuantity", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forOriginalQuantityNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_originalQuantity", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forPlannedQuantityEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_plannedQuantity", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forPlannedQuantityNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_plannedQuantity", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forNominalQuantityEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_nominalQuantity", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forNominalQuantityNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_nominalQuantity", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forPlannedPotencyEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_plannedPotency", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forPlannedPotencyNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_plannedPotency", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forActualPotencyEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_actualPotency", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forActualPotencyNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_actualPotency", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forPrintedSublotKeyEqualTo(Long value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_printedSublotKey", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forPrintedSublotKeyNotEqualTo(Long value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_printedSublotKey", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forOrderStepInputKeyEqualTo(Long value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_orderStepInputKey", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forOrderStepInputKeyNotEqualTo(Long value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_orderStepInputKey", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialIdentifierEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_materialIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialIdentifierNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_materialIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialIdentifierContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_materialIdentifier", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialIdentifierStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_materialIdentifier", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialShortDescrEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_materialShortDescr", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialShortDescrNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_materialShortDescr", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialShortDescrContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_materialShortDescr", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialShortDescrStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_materialShortDescr", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialTypeEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_materialType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialTypeNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_materialType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialTypeContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_materialType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forMaterialTypeStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_materialType", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forIsSplitPositionEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_isSplitPosition", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forIsSplitPositionNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_isSplitPosition", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSplitPositionEqualTo(Long value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_splitPosition", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSplitPositionNotEqualTo(Long value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_splitPosition", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSublotIdentifiedEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_sublotIdentified", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forSublotIdentifiedNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_sublotIdentified", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingTypeEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_weighingType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingTypeNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_weighingType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingTypeContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_weighingType", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingTypeStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_weighingType", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingMethodEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_weighingMethod", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingMethodNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_weighingMethod", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingMethodContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_weighingMethod", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forWeighingMethodStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_weighingMethod", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forActualQuantityEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_actualQuantity", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forActualQuantityNotEqualTo(MeasuredValue value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_actualQuantity", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forTargetSublotIdentEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_targetSublotIdent", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forTargetSublotIdentNotEqualTo(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_targetSublotIdent", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forTargetSublotIdentContaining(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameContaining("LC_targetSublotIdent", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forTargetSublotIdentStartingWith(String value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameStartingWith("LC_targetSublotIdent", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forIdentifiedOnlyEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_identifiedOnly", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forIdentifiedOnlyNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_identifiedOnly", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forDiffBatchIdentifiedEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_diffBatchIdentified", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forDiffBatchIdentifiedNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_diffBatchIdentified", value);
    }


    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forTargetContainerClosedEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameEqualTo("LC_targetContainerClosed", value);
    }

    /**
     * Generated method definition
     *
     * @param value the value to be filtered for
     * @return the filter object
     * @throws DatasweepException the PC exception
     */
    public MESRtPhaseDataWDMatIdent0010Filter forTargetContainerClosedNotEqualTo(Boolean value) //
            throws DatasweepException {
        return (MESRtPhaseDataWDMatIdent0010Filter) forColumnNameNotEqualTo("LC_targetContainerClosed", value);
    }

}
